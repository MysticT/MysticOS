-- OS Lib for MysticOS
--[[
Copyright © 2012 Esteban Hermida a.k.a MysticT

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
copies of the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

-The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
-Visible credit is given to the original author.
-The software is distributed in a non-profit way.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--]]

local tEnvVars = {}

function version()
	return sys.version()
end

function versionNum()
	return sys.versionNum()
end

function computerID()
	return ccos.computerID()
end

function getComputerLabel()
	return ccos.getComputerLabel()
end

function setComputerLabel(label)
	ccos.setComputerLabel(label)
end

function shutdown()
	sys.shutdown()
end

function reboot()
	sys.reboot()
end

function pullEvent(...)
	return coroutine.yield(...)
end

function queueEvent(sEvt, ...)
	ccos.queueEvent(sEvt, ...)
end

function clock()
	return ccos.clock()
end

function time()
	return ccos.time()
end

function startTimer(n)
	return ccos.startTimer(n)
end

function setAlarm(n)
	return ccos.setAlarm(n)
end

function sleep(n)
	local timer = startTimer(n)
	repeat
		local evt, t = pullEvent("timer")
	until t == timer
end

function loadSharedLib(sPath)
	local sName = fs.getName(sPath)
	local file = fs.open(sPath)
	if file:isOpen() then
		local sLib = file:readAll()
		file:close()
		return sys.loadSharedLib(sLib, sName)
	end
	return false, "File "..sPath.." not found."
end

function unloadSharedLib(sName)
	return sys.unloadSharedLib(sName)
end

function unloadSharedLibs()
	sys.unloadSharedLibs(sName)
end

function listSharedLibs(bAll)
	return sys.listLibs(bAll)
end

function setEnvVar(sVar, val)
	CheckVarType(sVar, "string")
	CheckVarTypes(val, "string", "number", "boolean")
	tEnvVars[sVar] = val
end

function getEnvVar(sVar)
	return tEnvVars[sVar]
end

function clearEnvVars()
	table.clear(tEnvVars)
end

function createProcess(sName)
	CheckVarType(sName, "string")
	return sys.createProcess(sName)
end

function killProcess(pid)
	CheckVarType(pid, "number")
	return sys.killProcess(pid)
end

function getProcesses()
	return sys.getProcesses()
end

function processCount()
	return sys.processCount()
end

function runningProcess()
	return sys.runningProcess()
end

function createThread(pid, func)
	CheckVarType(pid, "number")
	CheckVarType(func, "function")
	return sys.createThread(pid, func)
end

function killThread(pid, tid)
	CheckVarType(pid, "number")
	CheckVarType(tid, "number")
	return sys.killThread(pid, tid)
end

function getThreads(pid)
	CheckVarType(pid, "number")
	return sys.getThreads(pid)
end

function threadCount(pid)
	CheckVarType(pid, "number")
	return sys.threadCount(pid)
end

function runningThread()
	return sys.runningThread()
end