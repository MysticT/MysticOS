-- Class Lib for MysticOS
--[[
Copyright © 2012 Esteban Hermida a.k.a MysticT

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
copies of the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

-The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
-Visible credit is given to the original author.
-The software is distributed in a non-profit way.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--]]

local tMetaMethods = { "__tostring", "__unm", "__add", "__sub", "__mul", "__div", "__pow", "__concat", "__eq", "__lt", "__le" }

-- Lib functions

--[[
- new (function)
	* creates a new class with the given name and base class
	* return values:
		- the new class, nil if it already exists (table, nil)
	* parameters:
		- sName: the class name (string)
		- tBase: the base class (class) [optional]
--]]
function new(sName, tBase)
	CheckVarType(sName, "string")
	CheckVarTypes(tBase, "nil", "table")
	-- class static data
	local tStatic = {}
	-- Class Instance Metatable
	local tClass = {}
	local base
	if tBase and getmetatable(tBase) == "class" then
		base = tBase
	end
	-- isA function: checks if the object is of a certain class
	tStatic.isA = function(obj, klass)
		if klass == tClass then
			return true
		end
		if base ~= nil then
			return base:isA(klass)
		end
		return false
	end
	tClass.__index = function(obj, key)
		return tStatic[key] or (base and base[key])
	end
	-- new function: create a new object of this class
	tClass.new = function(...)
		return tClass(...)
	end
	-- set metamethod function
	tClass.setmetamethod = function(meta, func)
		CheckVarType(meta, "string")
		CheckVarType(func, "function")
		if not table.contains(tMetaMethods, meta) then
			error("No such metamethod "..meta)
		end
		rawset(tClass, meta, func)
	end
	tClass.__tostring = function()
		return sName
	end
	tClass.__metatable = "object"
	-- Class Metatable
	local tMeta = {}
	tMeta.__call = function(klass, ...)
		local obj = {}
		setmetatable(obj, klass)
		if klass.initialize then
			klass.initialize(obj, ...)
		end
		return obj
	end
	tMeta.__index = function(klass, key)
		return tStatic[key] or (base and base[key])
	end
	tMeta.__newindex = function(obj, key, val)
		tStatic[key] = val
	end
	tMeta.__tostring = function()
		return "Class "..sName
	end
	tMeta.__metatable = "class"
	setmetatable(tClass, tMeta)
	return tClass
end