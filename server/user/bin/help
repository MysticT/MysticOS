local function lookup(sTopic)
 	-- Look on the path variable
    for sPath in string.gmatch(os.getEnvVar("HelpPath"), "[^;]+") do
    	sPath = fs.combine(sPath, sTopic)
		if fs.exists(sPath) and not fs.isDir(sPath) then
			return sPath
    	end
    end
	-- Not found
	return nil
end

local function topics()
	local tItems = {}
	-- Add topics from the path
    for sPath in string.gmatch(os.getEnvVar("HelpPath"), "[^;]+") do
		if fs.isDir(sPath) then
			local tList = fs.list(sPath)
			for n, sFile in pairs(tList) do
				if string.sub(sFile, 1, 1) ~= "." then
					if not fs.isDir(fs.combine(sPath, sFile)) then
						tItems[sFile] = true
					end
				end
			end
		end
    end	
	-- Sort and return
	local tItemList = {}
	for sItem, b in pairs(tItems) do
		table.insert(tItemList, sItem)
	end
	table.sort(tItemList)
	return tItemList
end

local function loadTopic(sTopic)
	local sFile = lookup(sTopic)
	if sFile then
		local file = fs.open(sFile)
		if file:isOpen() then
			local t = {}
			for line in file:lines() do
				table.insert(t, line)
			end
			return t
		end
	end
	return nil
end

tArgs = { ... }
local sTopic
if #tArgs > 0 then
	sTopic = tArgs[1]
else
	sTopic = "intro"
end

local w, h = term.getSize()

if sTopic == "index" then
	print("Help topics availiable:")
	local tTopics = topics()
	print(utils.tabulate(w, tTopics))
	return
end

local tLines = loadTopic(sTopic)
if tLines then
	for _,line in ipairs(tLines) do
		print(line)
		local x, y = term.getCursorPos()
		if y >= h then
			write("Press any key to continue, Enter to exit")
			local e, k = os.pullEvent("key")
			term.clearLine()
			term.setCursorPos(1, h)
			if k == keys.Enter then
				break
			end
		end
	end
else
	print("No help available")
end