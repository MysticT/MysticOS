-- MysticOS Image Library

-- TODO: load paint/npaintpro images

-- Colors

local tColorLookup = {}
for i = 1, 16 do
	tColorLookup[string.byte("0123456789abcdef", i, i)] = 2 ^ (i - 1)
end

local function color2str(c)
	local i = math.floor(math.logN(c, 2)) + 1
	if i > 0 and i <= 16 then
		return string.at("0123456789abcdef", i)
	end
	return "0"
end

local function str2color(s, i)
	return tColorLookup[string.byte(s, i or 1)] or 0
end

local function getBgColor(c)
	return 2 ^ bit.band(bit.brshift(c, 4), 0x0F)
end

local function getTxtColor(c)
	return 2 ^ bit.band(c, 0x0F)
end

local function getColorByte(bgColor, txtColor)
	bgColor = math.floor(math.logN(bgColor, 2))
	txtColor = math.floor(math.logN(txtColor, 2))
	return bit.bor(bit.blshift(bgColor, 4), txtColor)
end

-- Image Class

local img = {}

function img:render(target, ox, oy)
	target = target or screen
	ox = ox or 1
	oy = oy or 1
	for y = 1, self.height do
		target.setCursorPos(ox, oy + y - 1)
		local i = 1
		local txt = self.text[y]
		local sBgColor = self.bgColor[y]
		local sTxtColor = self.txtColor[y]
		while i <= self.width do
			local bgColor = str2color(sBgColor, i)
			local txtColor = str2color(sTxtColor, i)
			j = i
			i = i + 1
			while i <= self.width and bgColor == str2color(sBgColor, i) and
					txtColor == str2color(sTxtColor, i) do
				i = i + 1
			end
			target.setBackgroundColor(bgColor)
			target.setTextColor(txtColor)
			target.write(string.sub(txt, j, i - 1))
		end
	end
end

function img:draw(src, ox, oy, x, y, w, h)
	ox = ox or 0
	oy = oy or 0
	x = x or 1
	y = y or 1
	w = w or src.width
	h = h or src.height
	if x <= self.width and y <= self.height then
		local sx, sy = 1, 1
		if x < 1 then
			w = w + x - 1
			sx = -x + 1
			x = 1
		end
		if x + w - 1 > self.width then
			w = self.width - x + 1
		end
		if y < 1 then
			h = h + y - 1
			sy = -y + 1
			y = 1
		end
		if y + h - 1 > self.height then
			h = self.height - y + 1
		end
		for i = 0, h - 1 do
			self.bgColor[y+i] = string.replace(self.bgColor[y+i], x, x + w - 1, string.sub(src.bgColor[oy+sy+i], ox + sx, ox + sx + w))
			self.txtColor[y+i] = string.replace(self.txtColor[y+i], x, x + w - 1, string.sub(src.txtColor[oy+sy+i], ox + sx, ox + sx + w))
			self.text[y+i] = string.replace(self.text[y+i], x, x + w - 1, string.sub(src.text[oy+sy+i], ox + sx, ox + sx + w))
		end
	end
end

function img:write(x, y, txt)
	if x <= self.width and y > 0 and y <= self.height then
		if x < 1 then
			txt = string.sub(txt, -x + 1)
			x = 1
		end
		if x + #txt - 1 > self.width then
			txt = string.sub(txt, 1, (self.width - x) + 1)
		end
		self.bgColor[y] = string.replace(self.bgColor[y], x, x + #txt - 1, string.rep(color2str(self.curBgColor), #txt))
		self.txtColor[y] = string.replace(self.txtColor[y], x, x + #txt - 1, string.rep(color2str(self.curTxtColor), #txt))
		self.text[y] = string.replace(self.text[y], x, x + #txt - 1, txt)
		return #txt
	end
	return 0
end

function img:read(x, y, len)
	if x <= self.width and y > 0 and y <= self.height then
		if x < 1 then
			w = len + x - 1
			x = 1
		end
		return string.sub(self.text[y], x, x + len)
	end
end

function img:clear(c)
	local sBlank = string.rep(" ", self.width)
	local sBgColor = string.rep(color2str(c or self.curBgColor), self.width)
	local sTxtColor = string.rep(color2str(self.curTxtColor), self.width)
	for y = 1, self.height do
		self.text[y] = sBlank
		self.bgColor[y] = sBgColor
		self.txtColor[y] = sTxtColor
	end
end

function img:clearLine(y)
	if y > 0 and y <= self.height then
		self.text[y] = string.rep(" ", self.width)
		self.bgColor[y] = string.rep(color2str(self.curBgColor), self.width)
		self.txtColor[y] = string.rep(color2str(self.curTxtColor), self.width)
	end
end

function img:getSize()
	return self.width, self.height
end

function img:getWidth()
	return self.width
end

function img:getHeight()
	return self.height
end

function img:scroll(n)
	n = n or 1
	if n >= self.height or n <= -self.height then
		self:clear()
	elseif n > 0 then
		for y = 1, self.height - n do
			self.text[y] = self.text[y + n]
			self.bgColor[y] = self.bgColor[y + n]
			self.txtColor[y] = self.txtColor[y + n]
		end
		local sBlank = string.rep(" ", self.width)
		local sBgColor = string.rep(color2str(self.curBgColor), self.width)
		local sTxtColor = string.rep(color2str(self.curTxtColor), self.width)
		for y = (self.height - n) + 1, self.height do
			self.text[y] = sBlank
			self.bgColor[y] = sBgColor
			self.txtColor[y] = sTxtColor
		end
	elseif n < 0 then
		n = -n
		for y = self.height, 1 + n, -1 do
			self.text[y] = self.text[y - n]
			self.bgColor[y] = self.bgColor[y - n]
			self.txtColor[y] = self.txtColor[y - n]
		end
		local sBlank = string.rep(" ", self.width)
		local sBgColor = string.rep(color2str(self.curBgColor), self.width)
		local sTxtColor = string.rep(color2str(self.curTxtColor), self.width)
		for y = 1, n do
			self.text[y] = sBlank
			self.bgColor[y] = sBgColor
			self.txtColor[y] = sTxtColor
		end
	end
end

function img:setTextColor(c, x, y)
	if x and y then
		if x > 0 and x <= self.width and y > 0 and y <= self.height then
			self.txtColor[y] = string.set(self.txtColor[y], x, color2str(c))
		end
	else
		self.curTxtColor = c
	end
end
img.setTextColour = img.setTextColor

function img:getTextColor(x, y)
	if x and y then
		if x > 0 and x <= self.width and y > 0 and y <= self.height then
			return str2color(string.at(self.txtColor[y], x))
		end
	else
		return self.curTxtColor
	end
end
img.getTextColour = img.getTextColor

function img:setBackgroundColor(c, x, y)
	if x and y then
		if x > 0 and x <= self.width and y > 0 and y <= self.height then
			self.bgColor[y] = string.set(self.bgColor[y], x, color2str(c))
		end
	else
		self.curBgColor = c
	end
end
img.setBackgroundColour = img.setBackgroundColor

function img:getBackgroundColor(x, y)
	if x and y then
		if x > 0 and x <= self.width and y > 0 and y <= self.height then
			return str2color(string.at(self.bgColor[y], x))
		end
	else
		return self.curBgColor
	end
end
img.getBackgroundColour = img.getBackgroundColor

function img:setChar(x, y, c)
	if x > 0 and x <= self.width and y > 0 and y <= self.height then
		self.text[y] = string.set(self.text[y], x, string.at(tostring(c), 1))
	end
end

function img:getChar(x, y)
	if x > 0 and x <= self.width and y > 0 and y <= self.height then
		return string.at(self.text[y], x)
	end
end

function img:drawChar(x, y, c)
	if x > 0 and x <= self.width and y > 0 and y <= self.height then
		self.bgColor[y] = string.set(self.bgColor[y], x, color2str(self.curBgColor))
		self.txtColor[y] = string.set(self.txtColor[y], x, color2str(self.curTxtColor))
		self.text[y] = string.set(self.text[y], x, string.at(tostring(c), 1))
	end
end

function img:copy()
	local tImg = {}
	tImg.width = self.width
	tImg.height = self.height
	tImg.text = {}
	tImg.bgColor = {}
	tImg.txtColor = {}
	tImg.curBgColor = self.curBgColor
	tImg.curTxtColor = self.curTxtColor
	for y = 1, self.height do
		tImg.text[y] = self.text[y]
		tImg.bgColor[y] = self.bgColor[y]
		tImg.txtColor[y] = self.txtColor[y]
	end
	return setmetatable(tImg, { __index = img, __metatable = "Image" })
end

function img:resize(width, height)
	if self.width ~= width or self.height ~= height then
		local h = math.min(self.height, height)
		if width > self.width then
			local diff = width - self.width
			local sBlank = string.rep(" ", diff)
			local sTxtColor = string.rep(color2str(self.curTxtColor), diff)
			local sBackColor = string.rep(color2str(self.curBgColor), diff)
			for y = 1, h do
				self.text[y] = self.text[y]..sBlank
				self.txtColor[y] = self.txtColor[y]..sTxtColor
				self.bgColor[y] = self.bgColor[y]..sBackColor
			end
		else
			for y = 1, h do
				self.text[y] = string.sub(self.text[y], 1, width)
				self.txtColor[y] = string.sub(self.txtColor[y], 1, width)
				self.bgColor[y] = string.sub(self.bgColor[y], 1, width)
			end
		end
		if height > self.height then
			local w = math.max(self.width, width)
			local sBlank = string.rep(" ", w)
			local sTxtColor = string.rep(color2str(self.curTxtColor), w)
			local sBackColor = string.rep(color2str(self.curBgColor), w)
			for y = self.height + 1, height do
				self.text[y] = sBlank
				self.bgColor[y] = sTxtColor
				self.txtColor[y] = sBackColor
			end
		else
			for y = height + 1, self.height do
				self.text[y] = nil
				self.bgColor[y] = nil
				self.txtColor[y] = nil
			end
		end
		self.width = width
		self.height = height
	end
end

-- API

function new(w, h)
	local tImg = {}
	tImg.width = w
	tImg.height = h
	tImg.text = {}
	tImg.bgColor = {}
	tImg.txtColor = {}
	tImg.curBgColor = colors.black
	tImg.curTxtColor = colors.white
	local sBlank = string.rep(" ", w)
	local sColor = string.rep(color2str(colors.black), w)
	for y = 1, h do
		tImg.text[y] = sBlank
		tImg.bgColor[y] = sColor
		tImg.txtColor[y] = sColor
	end
	return setmetatable(tImg, { __index = img, __metatable = "Image" })
end

-- Yield function
local yieldTime
local function yield()
	if yieldTime then
		if os.clock() - yieldTime > 2 then
			os.queueEvent("image_yield")
			os.pullEvent("image_yield")
			yieldTime = nil
		end
	else
		yieldTime = os.clock()
	end
end

-- Save/Load functions

local function writeHeader(file, tImg)
	file.writeBytes("MIF")
	file.writeUShort(tImg.width)
	file.writeUShort(tImg.height)
	file.writeUByte(getColorByte(tImg.curBgColor, tImg.curTxtColor))
end

local function readHeader(file)
	if file.readString(3) == "MIF" then
		local w = file.readUShort()
		local h = file.readUShort()
		local curColors = file.readUByte()
		local tImg = {}
		tImg.width = w
		tImg.height = h
		tImg.text = {}
		tImg.bgColor = {}
		tImg.txtColor = {}
		tImg.curBgColor = getBgColor(curColors)
		tImg.curTxtColor = getTxtColor(curColors)
		return tImg
	end
end

local function writeImageData(file, tImg)
	for y = 1, tImg.height do
		for x = 1, tImg.width do
			local bgColor = str2color(tImg.bgColor[y], x)
			local txtColor = str2color(tImg.txtColor[y], x)
			file.writeUByte(getColorByte(bgColor, txtColor))
			file.writeChar(string.at(tImg.text[y], x))
		end
		yield()
	end
end

local function readImageData(file, tImg)
	for y = 1, tImg.height do
		local txt = ""
		local bgColor = ""
		local txtColor = ""
		for x = 1, tImg.width do
			local c = file.readUByte()
			bgColor = bgColor..color2str(getBgColor(c))
			txtColor = txtColor..color2str(getTxtColor(c))
			txt = txt..file.readChar()
		end
		tImg.text[y] = txt
		tImg.bgColor[y] = bgColor
		tImg.txtColor[y] = txtColor
	end
end

function img:save(path)
	local file = fs.open(path, "wb")
	if file then
		writeHeader(file, self)
		writeImageData(file, self)
		file.close()
		return true
	end
	return false
end

function load(path)
	local file = fs.open(path, "rb")
	if file then
		local tImg = readHeader(file)
		if tImg then
			readImageData(file, tImg)
			file.close()
			return setmetatable(tImg, { __index = img })
		end
		file.close()
	end
	return nil
end