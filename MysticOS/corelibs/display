-- MysticOS Display Library

--[[
TODO:
	+ "desktop" background
	+ monitor_touch support
--]]

local tDisplays = {}
local lastID = 0
local curDisplay
local screenW, screenH

local function getDisplay()
	return curDisplay and tDisplays[curDisplay]
end

local function addDisplay(disp)
	lastID = lastID + 1
	tDisplays[lastID] = disp
	return lastID
end

-- System Bar

local tButtons = {}
local Button = {}

function Button:setBackgroundColor(c)
	if c ~= self.bgColor then
		self.bgColor = c
		redrawSystemBar()
	end
end
Button.setBackgroundColour = Button.setBackgroundColor

function Button:setTextColor(c)
	if c ~= self.txtColor then
		self.txtColor = c
		redrawSystemBar()
	end
end
Button.setTextColour = Button.setTextColor

function Button:setText(txt)
	if txt ~= self.text then
		self.text = txt
		redrawSystemBar()
	end
end

function Button:setPos(x)
	if x ~= self.x then
		self.x = x
		redrawSystemBar()
	end
end

function Button:setCallback(func)
	self.callback = func
end

-- Draw methods

local function drawSystemBar()
	-- Background
	screen.setBackgroundColor(colors.white)
	screen.setCursorPos(1, 1)
	screen.write(string.rep(" ", screen.getWidth()))
	-- Buttons
	for _,btn in pairs(tButtons) do
		screen.setBackgroundColour(btn.bgColor)
		screen.setTextColor(btn.txtColor)
		screen.setCursorPos(btn.x, 1)
		screen.write(btn.text)
	end
end

local function clearDisplay()
	local w, h = screen.getSize()
	local s = string.rep(" ", w)
	screen.setBackgroundColor(colors.black)
	for y = 2, h do
		screen.setCursorPos(1, y)
		screen.write(s)
	end
end

local function drawDisplay()
	local disp = getDisplay()
	if disp then
		disp.img:render(screen, 1, 2)
		screen.setCursorPos(disp.cursorX, disp.cursorY + 1)
		screen.setCursorBlink(disp.cursorBlink)
	else
		clearDisplay()
	end
end

local bRedraw = false
local bRedrawBar = false
local bRedrawDisplay = false
local nRedrawDelay = 0.1
local redrawTimer

local function drawScreen()
	if bRedraw then
		screen.setCursorBlink(false)
		if bRedrawBar then
			drawSystemBar()
			bRedrawBar = false
		end
		if bRedrawDisplay then
			drawDisplay()
			bRedrawDisplay = false
		end
		bRedraw = false
	end
end

local function redraw()
	if not bRedraw then
		bRedraw = true
		redrawTimer = os.startTimer(nRedrawDelay)
	end
end

-- Display API

function redrawDisplay()
	if not bRedrawDisplay then
		bRedrawDisplay = true
		redraw()
	end
end

function redrawSystemBar()
	if not bRedrawBar then
		bRedrawBar = true
		redraw()
	end
end

function redrawAll()
	bRedrawDisplay = true
	bRedrawBar = true
	redraw()
end

function drawImage(img, ox, oy, x, y, w, h)
	local disp = getDisplay()
	if disp then
		disp.img:draw(img, ox, oy, x, y, w, h)
		redrawDisplay()
	end
end

function write(txt, x, y)
	local disp = getDisplay()
	if disp then
		x = x or disp.cursorX
		y = y or disp.cursorY
		disp.cursorX = x + disp.img:write(x, y, txt)
		redrawDisplay()
	end
end

function read(len, x, y)
	local disp = getDisplay()
	if disp then
		x = x or disp.cursorX
		y = y or disp.cursorY
		return disp.img:read(x, y, len)
	end
end

function clear(c)
	local disp = getDisplay()
	if disp then
		disp.img:clear(c)
		redrawDisplay()
	end
end

function clearLine(y)
	local disp = getDisplay()
	if disp then
		disp.img:clearLine(y or disp.cursorY)
		redrawDisplay()
	end
end

function getCursorPos()
	local disp = getDisplay()
	if disp then
		return disp.cursorX, disp.cursorY
	end
	return 0, 0
end

function setCursorPos(x, y)
	local disp = getDisplay()
	if disp then
		disp.cursorX = x
		disp.cursorY = y
		redrawDisplay()
	end
end

function setCursorBlink(b)
	local disp = getDisplay()
	if disp then
		disp.cursorBlink = b
		redrawDisplay()
	end
end

function getSize()
	local disp = getDisplay()
	if disp then
		return disp.img:getSize()
	end
	return 0, 0
end

function getWidth()
	local disp = getDisplay()
	return disp and disp.img:getWidth() or 0
end

function getHeight()
	local disp = getDisplay()
	return disp and disp.img:getHeight() or 0
end

function scroll(n)
	local disp = getDisplay()
	if disp then
		disp.img:scroll(n)
		redrawDisplay()
	end
end

function setTextColor(c, x, y)
	local disp = getDisplay()
	if disp then
		disp.img:setTextColor(c, x, y)
		redrawDisplay()
	end
end
setTextColour = setTextColor

function getTextColor(x, y)
	local disp = getDisplay()
	if disp then
		return disp.img:getTextColor(x, y)
	end
end
getTextColour = getTextColor

function setBackgroundColor(c, x, y)
	local disp = getDisplay()
	if disp then
		disp.img:setBackgroundColor(c, x, y)
		redrawDisplay()
	end
end
setBackgroundColour = setBackgroundColor

function getBackgroundColor(x, y)
	local disp = getDisplay()
	if disp then
		return disp.img:getBackgroundColor(x, y)
	end
end
getBackgroundColour = getBackgroundColor

function isColor()
	return screen.isColor()
end
isColour = isColor

function setChar(c, x, y)
	local disp = getDisplay()
	if disp then
		x = x or disp.cursorX
		y = y or disp.cursorY
		disp.img:setChar(x, y, c)
		redrawDisplay()
	end
end

function getChar(x, y)
	local disp = getDisplay()
	if disp then
		x = x or disp.cursorX
		y = y or disp.cursorY
		return disp.img:getChar(x, y)
	end
end

function drawChar(c, x, y)
	local disp = getDisplay()
	if disp then
		x = x or disp.cursorX
		y = y or disp.cursorY
		disp.img:drawChar(x, y, c)
		redrawDisplay()
	end
end

function snapshot()
	local disp = getDisplay()
	if disp then
		return disp.img:copy()
	end
end

function new()
	local disp = {}
	local w, h = screen.getSize()
	disp.img = image.new(w, h - 1)
	disp.cursorX = 1
	disp.cursorY = 1
	disp.cursorBlink = false
	return addDisplay(disp)
end

function remove(id)
	tDisplays[id] = nil
	if id == curDisplay then
		curDisplay = nil
		redrawDisplay()
	end
end

function setCurrent(id)
	if id == 0 then
		curDisplay = nil
		redrawDisplay()
		return true
	elseif tDisplays[id] then
		if id ~= curDisplay then
			curDisplay = id
			redrawDisplay()
		end
		return true
	end
	return false
end

function getCurrent()
	return curDisplay
end

function update()
	local w, h = screen.getSize()
	if w ~= screenW or h ~= screenH then
		os.queueEvent("resize", w, h)
		screenW = w
		screenH = h
		for i = 1, #tDisplays do
			tDisplays[i].img:resize(w, h)
		end
		redrawAll()
	end
end

function addButton(x, txt, bgColor, txtColor, callback)
	local btn = {
		x = x,
		text = txt,
		bgColor = bgColor,
		txtColor = txtColor,
		callback = callback
	}
	tButtons[#tButtons + 1] = btn
	redrawSystemBar()
	return setmetatable(btn, { __index = Button, __metatable = "Button" })
end

function removeButton(btn)
	for i, b in pairs(tButtons) do
		if b == btn then
			table.remove(tButtons, i)
			redrawSystemBar()
			return true
		end
	end
	return false
end

-- Event Handlers

local function handleTimer(timer)
	if timer == redrawTimer then
		drawScreen()
		return true
	end
end

local function onMouseClick(btn, x, y, handled)
	if handled then
		return false
	end
	if y == 1 then
		-- System Bar
		for _,btn in pairs(tButtons) do
			if x >= btn.x and x < btn.x + #btn.text then
				if btn.callback then
					btn.callback()
				end
				break
			end
		end
	elseif y > 1 and y <= screen.getHeight() then
		os.queueEvent("mouse_click", btn, x, y - 1, true)
	end
	return true
end

local function onMouseDrag(btn, x, y, handled)
	if handled then
		return false
	end
	if y > 1 and y <= screen.getHeight() then
		os.queueEvent("mouse_drag", btn, x, y - 1, true)
	end
	return true
end

local function onMouseScroll(dir, x, y, handled)
	if handled then
		return false
	end
	if y > 1 and y <= screen.getHeight() then
		os.queueEvent("mouse_scroll", dir, x, y - 1, true)
	end
	return true
end

local bInit = false
function init()
	if not bInit then
		screenW, screenH = screen.getSize()
		-- Set event handler
		events.addHandler("timer", handleTimer)
		events.addHandler("mouse_click", onMouseClick)
		events.addHandler("mouse_drag", onMouseDrag)
		events.addHandler("mouse_scroll", onMouseScroll)
		bInit = true
	end
end