-- MysticOS Startup

local tEnv = {}

-- OS API

local nativeOS = os
os = {}

function os.version()
	return system.version()
end

function os.checkVersion(ver, minor, build)
	return system.checkVersion(ver, minor, build)
end

function os.computerID()
	return nativeOS.computerID()
end
os.getComputerID = os.computerID

function os.getComputerLabel()
	return nativeOS.getComputerLabel()
end

function os.setComputerLabel(label)
	nativeOS.setComputerLabel(label)
end

function os.pullEvent(...)
	return coroutine.yield(...)
end
os.pullEventRaw = os.pullEvent

function os.queueEvent(...)
	return nativeOS.queueEvent(...)
end

function os.clock()
	return nativeOS.clock()
end

function os.startTimer(nTime)
	return nativeOS.startTimer(nTime)
end

function os.sleep(nTime)
	local timer = os.startTimer(nTime)
	while true do
		local evt, arg = os.pullEvent("timer")
		if arg == timer then
			break
		end
	end
end

function os.time()
	return nativeOS.time()
end

function os.day()
	return nativeOS.day()
end

function os.setAlarm(nTime)
	return nativeOS.setAlarm(nTime)
end

function os.shutdown()
	system.shutdown()
	while true do
		coroutine.yield()
	end
end

function os.reboot()
	system.shutdown()
	nativeOS.reboot()
	while true do
		coroutine.yield()
	end
end

local function loadLib(path, env)
	local tEnv = {}
	setmetatable(tEnv, { __index = env })
	local fnLib, err = loadfile(path, tEnv)
	if not fnLib then
		return nil, err
	end
	local ok, lib = pcall(fnLib)
	if not ok then
		return nil, lib
	end
	if not lib or type(lib) ~= "table" then
		lib = {}
		for k, v in pairs(tEnv) do
			lib[k] = v
		end
	end
	return lib
end

function os.loadAPI(path, name)
	local env = getfenv(2)
	local lib, err = loadLib(path, env)
	if not lib then
		return nil, err
	end
	name = name or fs.getName(path, true)
	env[name] = lib
	return lib, name
end

function os.unloadAPI(name)
	local env = getfenv(2)
	if env[name] then
		env[name] = nil
	end
end

function os.loadLib(name)
	local path = fs.combine("/usr/libs", name) -- TODO
	local lib, err = loadLib(path, getfenv(2))
	if not lib then
		return nil, err
	end
	return lib, name
end

function os.run(env, path, ...)
	local func, err = loadfile(path, env)
	if not func then
		return false, err
	end
	return pcall(func, ...)
end

local tAppQueue = {}

function os.runApp(env, path, ...)
	local ok, name = app.start(env or tEnv, path)
	if not ok then
		return false, name
	end
	tAppQueue[#tAppQueue + 1] = {
		name = name,
		args = {...}
	}
	return true
end

function os.runOnBackground(env, path)
	-- TODO: arguments?
	path = fs.resolvePath(path, true)
	local func, err = loadfile(path, env or tEnv)
	if not func then
		return false, err
	end
	local pid = proc.createProcess(path, env)
	local ok, err = proc.createThread(func, pid)
	if not ok then
		proc.kill(pid)
		return false, err
	end
	return true
end

function os.processList()
	return proc.list()
end

-- Global functions

local _loadfile = loadfile
function loadfile(path, env)
	return _loadfile(fs.resolvePath(path, true), env)
end

function dofile(path, env)
	local fnFile, err = loadfile(path, env)
	if fnFile then
		return fnFile()
	end
	error(err, 2)
end

function sleep(nTime)
	os.sleep(nTime)
end

function write(sText)
	sText = tostring(sText)
	local nLines = 0
	local w, h = term.getSize()
	if w < 1 or h < 1 then
		return 0
	end
	local x, y = term.getCursorPos()
	local function newline()
		if y + 1 <= h then
			term.setCursorPos(1, y + 1)
		else
			term.scroll(1)
			term.setCursorPos(1, h)
		end
		x, y = term.getCursorPos()
		nLines = nLines + 1
	end
	while #sText > 0 do
		local space = string.match(sText, "^([ \t]+)")
		if space then
			term.write(space)
			x, y = term.getCursorPos()
			sText = string.sub(sText, #space + 1)
		end
		while string.at(sText, 1) == "\n" do
			newline()
			sText = string.sub(sText, 2)
		end
		if #sText > 0 then
			local txt = string.match(sText, "^[^ \t\n]+")
			if txt then
				sText = string.sub(sText, #txt + 1)
				if #txt > w then
					while #txt > 0 do
						if x > w then
							newline()
						end
						term.write(txt)
						txt = string.sub(txt, (w - x) + 2)
						x, y = term.getCursorPos()
					end
				else
					if #txt > w - x then
						newline()
					end
					term.write(txt)
					x, y = term.getCursorPos()
				end
			end
		end
	end
	return nLines
end

function print(...)
	local nLines = 0
	for i = 1, #arg do
		nLines = nLines + write(tostring(arg[i]))
	end
	nLines = nLines + write("\n")
	return nLines
end

function printError(...)
	if term.isColor() then
		term.setTextColor(colors.red)
	end
	print(...)
	term.setTextColor(colors.white)
end

function read(sReplaceChar, tHistory, nMax)
	term.setCursorBlink(true)
	local sLine = ""
	local nHistoryPos = nil
	local nPos = 0
	if sReplaceChar then
		sReplaceChar = string.at(sReplaceChar, 1)
	end
	local w, h = term.getSize()
	local sx, sy = term.getCursorPos()
	local function redraw()
		local nScroll = 0
		if sx + nPos >= w then
			nScroll = (sx + nPos) - w
		end
		term.setCursorPos(sx, sy)
		term.write(string.rep(" ", w - sx + 1))
		term.setCursorPos(sx, sy)
		if sReplaceChar then
			term.write(string.rep(sReplaceChar, #sLine - nScroll))
		else
			term.write(string.sub(sLine, nScroll + 1 ))
		end
		term.setCursorPos(sx + nPos - nScroll, sy)
	end
	while true do
		local evt, arg = os.pullEvent("char", "key")
		if evt == "char" then
			if not nMax or #sLine < nMax then
				sLine = string.sub(sLine, 1, nPos)..arg..string.sub(sLine, nPos + 1)
				nPos = nPos + 1
				redraw()
			end
		elseif evt == "key" then
			if arg == keys.enter then
				break
			elseif arg == keys.left then
				if nPos > 0 then
					nPos = nPos - 1
					redraw()
				end
			elseif arg == keys.right then
				if nPos < #sLine then
					nPos = nPos + 1
					redraw()
				end
			elseif arg == keys.up or arg == keys.down then
				if tHistory then
					if arg == keys.up then
						if nHistoryPos == nil then
							if #tHistory > 0 then
								nHistoryPos = #tHistory
							end
						elseif nHistoryPos > 1 then
							nHistoryPos = nHistoryPos - 1
						end
					else
						if nHistoryPos == #tHistory then
							nHistoryPos = nil
						elseif nHistoryPos ~= nil then
							nHistoryPos = nHistoryPos + 1
						end						
					end
					if nHistoryPos then
						sLine = tHistory[nHistoryPos]
						nPos = #sLine
					else
						sLine = ""
						nPos = 0
					end
					redraw()
				end
			elseif arg == keys.backspace then
				if nPos > 0 then
					sLine = string.sub(sLine, 1, nPos - 1)..string.sub(sLine, nPos + 1)
					nPos = nPos - 1
					redraw()
				end
			elseif arg == keys.delete then
				sLine = string.sub(sLine, 1, nPos)..string.sub(sLine, nPos + 2)
				redraw()
			elseif arg == keys.home then
				nPos = 0
				redraw()
			elseif arg == keys["end"] then
				nPos = #sLine
				redraw()
			end
		end
	end
	term.setCursorBlink(false)
	term.setCursorPos(w + 1, sy)
	print()
	return sLine
end

-- Initialize libraries

fs.init()
display.init()
app.init()
menu.init()
sysconfig.load()

-- Initialize Environment

do
	local copy = {
		-- Global functions
		"assert", "dofile", "error", "getfenv", "getmetatable", "ipairs", "loadfile",
		"loadstring", "next", "pairs", "pcall", "print", "printError", "rawequal",
		"rawget", "rawset", "read", "select", "sleep", "setfenv", "setmetatable",
		"tonumber", "tostring", "type", "unpack", "write", "xpcall", "__inext", "__VERSION",
		-- APIs
		"bit", "bit32", "class", "colors", "coroutine", "config", "crypto", "fs", "image",
		"imageio", "keys", "math", "os", "peripheral", "redstone", "rs", "string", "table"
	}
	-- Load APIs
	local sApisPath = "/system/apis"
	local apis = fs.list(sApisPath)
	table.sort(apis)
	for i = 1, #apis do
		local ok, name = os.loadAPI(fs.combine(sApisPath, apis[i]))
		if ok then
			copy[#copy + 1] = name
		end
	end
	local env = getfenv()
	for i = 1, #copy do
		local k = copy[i]
		tEnv[k] = env[k]
	end
	tEnv._G = tEnv
end

-- Screen & Display

local sysDispID = display.new()
local prevApp

local function showSysDisplay()
	if menu.isOpen() then
		menu.close()
	end
	prevApp = app.getCurrent()
	if prevApp then
		app.switch(0)
	end
	display.setFront(sysDispID)
	display.setCurrent(sysDispID)
end

local function hideSysDisplay()
	display.setFront(0)
	display.setCurrent(0)
	if prevApp then
		app.switch(prevApp)
	end
end

-- Error handling

local bError = false

local function showError(title, msg)
	bError = true
	showSysDisplay()
	term.clear()
	local w, h = display.getSize()
	term.setCursorPos(math.floor((w / 2) - (#title / 2)), 1)
	write(title)
	term.setCursorPos(1, 2)
	print(msg)
	print("\nPress Enter to Continue...")
end

-- System Menus

local function newMenu(path)
	local ok, id = menu.new(getfenv(), path)
	if not ok then
		showError(id)
	end
	return id
end

local function openMenu(id, ...)
	if menu.isOpen(id) then
		menu.close()
	else
		menu.open(id, ...)
	end
end

local launcherMenu = newMenu("/system/menus/launcher")
local switcherMenu = newMenu("/system/menus/switcher")
local systemMenu = newMenu("/system/menus/system")

-- Event handlers

events.addHandler("terminate", function()
	app.kill()
	return true
end)

events.addHandler("error", function(pid, tid, err)
	showError("Error (PID: "..pid.." TID: "..tid..")", err)
end)

events.addHandler("process_update", function()
	local n = #tAppQueue
	if n > 0 then
		app.switch(tAppQueue[n].name) -- TODO: switch to last successfull app?
		for i = 1, n do
			local tApp = tAppQueue[i]
			app.run(tApp.name, unpack(tApp.args))
		end
		table.clear(tAppQueue)
	end
end)

events.addHandler("key", function(key)
	if bError then
		if key == keys.enter then
			hideSysDisplay()
			bError = false
		end
	else
		if key == sysconfig.get("keys_switcherMenu") then -- App Switcher
			openMenu(switcherMenu, app.getCurrent())
		elseif key == sysconfig.get("keys_launcherMenu") then -- Launcher
			openMenu(launcherMenu)
		elseif key == sysconfig.get("keys_systemMenu") then -- System Menu
			openMenu(systemMenu)
		else
			events.dispatch("user_input", "key", key)
		end
	end
	return true
end)

do
	local tUserInput = { "char", "mouse_click", "mouse_drag", "mouse_scroll" }
	for i = 1, #tUserInput do
		local evt = tUserInput[i]
		events.addHandler(evt, function(...)
			events.dispatch("user_input", evt, ...)
			return true
		end)
	end
end

-- First redraw
display.redraw()

-- Start running
system.run()