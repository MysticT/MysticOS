-- MysticOS GUI API

--[[
TODO:
	.controls:
		+ menu
		+ checkbox
		+ text & line edit
	.Control:
		+ aligned print (right, left, center)
--]]

-- Helper functions

local function checkBounds(x, y, w, h, px, py)
	return px >= x and px < x + w and py >= y and py < y + h
end

local function checkControlBounds(ctrl, x, y)
	local w, h = ctrl:getSize()
	return checkBounds(ctrl.x, ctrl.y, w, h, x, y)
end

local function newClass(parent)
	return setmetatable({}, { __index = parent })
end

local function newObj(tbl, class)
	return setmetatable(tbl, { __index = class })
end

-- Base Control

Control = {}

function Control:getPos()
	return self.x, self.y
end

function Control:setPos(x, y)
	self.x = x
	self.y = y
end

function Control:drawImage(src, x, y, w, h, ox, oy)
	self.buff:draw(src, x, y, w, h, ox, oy)
end

function Control:write(txt, x, y)
	x = x or self.cursorX
	y = y or self.cursorY
	self.cursorX = x + self.buff:write(x, y, txt)
end

function Control:read(len, x, y)
	x = x or self.cursorX
	y = y or self.cursorY
	return self.buff:read(x, y, len)
end

function Control:clear(c)
	self.buff:clear(c)
end

function Control:clearLine(y)
	self.buff:clearLine(y or self.cursorY)
end

function Control:getCursorPos()
	return self.cursorX, self.cursorY
end

function Control:setCursorPos(x, y)
	self.cursorX = x
	self.cursorY = y
end

function Control:setCursorBlink(b)
	self.cursorBlink = b
end

function Control:getSize()
	return self.buff:getSize()
end

function Control:getWidth()
	return self.buff:getWidth()
end

function Control:getHeight()
	return self.buff:getHeight()
end

function Control:scroll(n)
	self.buff:scroll(n)
end

function Control:setTextColor(c, x, y)
	self.buff:setTextColor(c, x, y)
end
Control.setTextColour = Control.setTextColor

function Control:getTextColor(x, y)
	return self.buff:getTextColor(x, y)
end
Control.getTextColour = Control.getTextColor

function Control:setBackgroundColor(c, x, y)
	self.buff:setBackgroundColor(c, x, y)
end
Control.setBackgroundColour = Control.setBackgroundColor

function Control:getBackgroundColor(x, y)
	return self.buff:getBackgroundColor(x, y)
end
Control.getBackgroundColour = Control.getBackgroundColor

function Control:isColor()
	return true
end
Control.isColour = Control.isColor

function Control:setChar(c, x, y)
	x = x or self.cursorX
	y = y or self.cursorY
	self.buff:setChar(x, y, c)
end

function Control:getChar(x, y)
	x = x or self.cursorX
	y = y or self.cursorY
	return self.buff:getChar(x, y)
end

function Control:drawChar(c, x, y)
	x = x or self.cursorX
	y = y or self.cursorY
	self.buff:drawChar(x, y, c)
end

function Control:print(sText, x, y)
	sText = tostring(sText)
	local nLines = 0
	local w, h = self:getSize()
	if w < 1 or h < 1 then
		return 0
	end
	x = x or self.cursorX
	y = y or self.cursorY
	self:setCursorPos(x, y)
	local function newline()
		if y + 1 <= h then
			self:setCursorPos(1, y + 1)
		else
			self:scroll(1)
			self:setCursorPos(1, h)
		end
		x, y = self:getCursorPos()
		nLines = nLines + 1
	end
	while #sText > 0 do
		local space = string.match(sText, "^([ \t]+)")
		if space then
			self:write(space)
			x, y = self:getCursorPos()
			sText = string.sub(sText, #space + 1)
		end
		while string.at(sText, 1) == "\n" do
			newline()
			sText = string.sub(sText, 2)
		end
		if #sText > 0 then
			local txt = string.match(sText, "^[^ \t\n]+")
			if txt then
				sText = string.sub(sText, #txt + 1)
				if #txt > w then
					while #txt > 0 do
						if x > w then
							newline()
						end
						self:write(txt)
						txt = string.sub(txt, (w - x) + 2)
						x, y = self:getCursorPos()
					end
				else
					if #txt > w - x then
						newline()
					end
					self:write(txt)
					x, y = self:getCursorPos()
				end
			end
		end
	end
	return nLines
end

function Control:render()
	display.drawImage(self.buff, self.x, self.y)
end

function control(x, y, w, h)
	local ctrl = {}
	ctrl.x = x
	ctrl.y = y
	ctrl.cursorX = 1
	ctrl.cursorY = 1
	ctrl.buff = image.new(w, h)
	return newObj(ctrl, Control)
end

-- View

View = newClass(Control)

function View:addChild(child)
	child.parent = self
	self.childs[#self.childs + 1] = child
end

function View:removeChild(child)
	for i = 1, #self.childs do
		if self.childs[i] == child then
			table.remove(self.childs, i)
			child.parent = nil
			break
		end
	end
end

function View:setFocus(child)
	for i = 2, #self.childs do
		if self.childs[i] == child then
			table.move(self.childs, i, 1)
			break
		end
	end
end

function View:handleEvent(evt, ...)
	if evt == "mouse_click" then
		return self:onMouseClick(...)
	elseif evt == "mouse_drag" then
		return self:onMouseDrag(...)
	elseif evt == "mouse_scroll" then
		return self:onMouseScroll(...)
	elseif evt == "key" then
		return self:onKeyDown(...)
	elseif evt == "char" then
		return self:onChar(...)
	else
		for i = 1, #self.childs do
			local child = self.childs[i]
			if child.handleEvent and child:handleEvent(evt, ...) then
				return true
			end
		end
	end
	return false
end

function View:onMouseClick(btn, x, y)
	for i = 1, #self.childs do
		local child = self.childs[i]
		if checkControlBounds(child, x, y) then
			self:setFocus(child)
			if child.onMouseClick then
				child:onMouseClick(btn, (x - child.x) + 1, (y - child.y) + 1)
			end
			return true
		end
	end
	return false
end

function View:onMouseDrag(btn, x, y)
	for i = 1, #self.childs do
		local child = self.childs[i]
		if checkControlBounds(child, x, y) then
			self:setFocus(child)
			if child.onMouseDrag then
				child:onMouseDrag(btn, (x - child.x) + 1, (y - child.y) + 1)
			end
			return true
		end
	end
	return false
end

function View:onMouseScroll(dir, x, y)
	for i = 1, #self.childs do
		local child = self.childs[i]
		if checkControlBounds(child, x, y) then
			if child.onMouseScroll then
				child:onMouseScroll(dir)
			end
			return true
		end
	end
	return false
end

function View:onKeyDown(key)
	local child = self.childs[1]
	if child and child.onKeyDown then
		child:onKeyDown(key)
		return true
	end
	return false
end

function View:onChar(char)
	local child = self.childs[1]
	if child and child.onChar then
		child:onChar(char)
		return true
	end
	return false
end

function View:draw()
	self:clear()
	for i = 1, #self.childs do
		local child = self.childs[i]
		child:draw()
		local x, y = child:getPos()
		local w, h = child:getSize()
		self:drawImage(child.buff, x, y, w, h)
	end
end

function view(x, y, w, h)
	local v = control(x, y, w, h)
	v.childs = {}
	return newObj(v, View)
end

-- Label

Label = newClass(Control)

function Label:draw()
	self:clear()
	self:setCursorPos(1, 1)
	self:print(self.text)
end

function Label:setText(txt)
	self.text = txt
end

function label(x, y, w, h, txt)
	local lbl = control(x, y, w, h)
	lbl.text = txt or ""
	return newObj(lbl, Label)
end

-- Button

Button = newClass(Control)

function Button:draw()
	self:clear()
	local x = math.ceil((self:getWidth() / 2) - (#self.text / 2)) + 1
	local y = math.ceil(self:getHeight() / 2)
	self:write(self.text, x, y)
end

function Button:setText(txt)
	self.text = txt
end

function Button:onMouseClick(btn, x, y)
	if btn == 1 and self.callback then
		self.callback()
	end
end

function button(x, y, w, h, txt, callback)
	local btn = control(x, y, w, h)
	btn.text = txt or ""
	btn.callback = callback
	return newObj(btn, Button)
end

-- Image Button

ImageButton = newClass(Control)

function ImageButton:draw()
	if self.image then
		local w = math.min(self.image:getWidth(), self:getWidth())
		local h = math.min(self.image:getHeight(), self:getHeight())
		self:drawImage(self.image, 1, 1, w, h)
	end
end

function ImageButton:setImage(img)
	self.image = img
end

function ImageButton:onMouseClick(btn, x, y)
	if btn == 1 and self.callback then
		self.callback()
	end
end

function imageButton(x, y, w, h, img, callback)
	local btn = control(x, y, w, h)
	if type(img) == "string" then
		btn.image = image.load(img)
	else
		btn.image = img
	end
	btn.callback = callback
	return newObj(btn, ImageButton)
end

-- List

List = newClass(Control)

function List:draw()
	self:clear()
	for y = 1, math.min(#self.list, self:getHeight() - 1) do
		if y + self.scroll == self.selected then
			local c = self:getBackgroundColor()
			self:setBackgroundColor(self.selectColor)
			self:clearLine(y)
			self:write(tostring(self.list[y + self.scroll]), 1, y)
			self:setBackgroundColor(c)
		else
			self:clearLine(y)
			self:write(tostring(self.list[y + self.scroll]), 1, y)
		end
	end
end

function List:getList()
	return self.list
end

function List:setList(l)
	self.list = l
end

function List:getSelectionColor()
	return self.selectColor
end

function List:setSelectionColor(c)
	self.selectColor = c
end

function List:scroll(n)
	if self.list then
		self.scroll = math.max(math.min(self.scroll + n, #self.list - self:getHeight()), 0)
	end
end

function List:setSelected(n)
	if self.list then
		if n ~= self.selected and n > 0 and n <= #self.list then
			self.selected = n
			if self.selected - self.scroll > self:getHeight() then
				self.scroll = self.selected - self:getHeight()
			elseif self.selected - self.scroll < 1 then
				self.scroll = self.selected - 1
			end
			if self.onSelectionChanged then
				self.onSelectionChanged()
			end
		end
	end
end

function List:getSelected()
	return self.list[self.selected]
end

function List:next()
	if self.selected < #self.list then
		self:setSelected(self.selected + 1)
	else
		self:setSelected(1)
	end
end

function List:prev()
	if self.selected > 1 then
		self:setSelected(self.selected - 1)
	else
		self:setSelected(#self.list)
	end
end

function List:onMouseClick(btn, x, y)
	if self.list then
		y = y + self.scroll
		if btn == 1 and y <= #self.list then
			if y == nSelected then
				-- TODO: activate callback?
			else
				self:setSelected(y)
			end
		end
	end
end

function List:onMouseScroll(dir)
	self:scroll(dir)
end

function List:onKeyDown(key)
	if key == keys.down then
		self:next()
	elseif key == keys.up then
		self:prev()
	elseif key == keys["end"] then
		self:setSelected(#self.list)
	elseif key == keys.home then
		self:setSelected(1)
	elseif key == keys.enter then
		-- TODO: activate callback?
	end
end

function list(x, y, w, h, l, callback)
	local list = control(x, y, w, h)
	list.list = l or {}
	list.scroll = 0
	list.selected = 1
	list.selectColor = colors.blue
	list.onSelectionChanged = callback
	return newObj(list, List)
end

-- Bar Control

Bar = newClass(Control)

function Bar:draw()
	self:clear()
	local c = self:getBackgroundColor()
	self:setBackgroundColor(self.fillColor)
	local w = math.floor(self:getWidth() * self.fill)
	self:write(string.rep(" ", w), 1, 1)
	self:setBackgroundColor(c)
end

function Bar:getFillColor()
	return self.fillColor
end

function Bar:setFillColor(c)
	self.fillColor = c
end

function Bar:getFill()
	return self.fill
end

function Bar:setFill(n)
	self.fill = math.max(math.min(n, 1), 0)
end

function bar(x, y, w)
	local bar = control(x, y, w, 1)
	bar.fillColor = colors.green
	bar.fill = 0
	return newObj(bar, Bar)
end

-- Slider Bar Control

SliderBar = newClass(Bar)

function SliderBar:isActive()
	return self.active
end

function SliderBar:setActive(b)
	self.active = b
end

function SliderBar:onMouseClick(btn, x, y)
	if self.active and btn == 1 then
		self.fill = x / self:getWidth()
		if self.callback then
			self.callback(self.fill)
		end
	end
end

SliderBar.onMouseDrag = SliderBar.onMouseClick

function sliderBar(x, y, w, callback)
	local sbar = bar(x, y, w)
	sbar.active = true
	sbar.onClick = callback
	return newObj(sbar, SliderBar)
end

-- Message Box

MessageBox = newClass(Control)

function MessageBox:draw()
	self:clear()
	self:write(self.title, math.floor((self:getWidth() / 2) - (#self.title / 2)), 1)
	self:print(self.msg, 1, 2)
	-- TODO: buttons
end

function messageBox(x, y, w, h, title, msg)
	local msgbox = control(x, y, w, h)
	msgbox.title = tostring(title)
	msgbox.msg = tostring(msg)
	return newObj(msgbox, MessageBox)
end

function message(w, h, title, msg, bgColor, txtColor)
	local sw, sh = term.getSize()
	local x = math.floor((sw / 2) - (w / 2))
	local y = math.floor((sh / 2) - (h / 2))
	local msgbox = messageBox(x, y, 0, w, h, title, msg)
	if bgColor then
		msgbox:setBackgroundColor(bgColor)
	end
	if txtColor then
		msgbox:setTextColor(txtColor)
	end
	while true do
		msgbox:draw()
		msgbox:render()
		local evt, arg, mx, my = os.pullEvent("mouse_click", "key")
		if evt == "mouse_click" then
			if arg == 1 and checkControlBounds(msgbox, mx, my) then
				break
			end
		elseif evt == "key" then
			if arg == keys.enter then
				break
			end
		end
	end
end