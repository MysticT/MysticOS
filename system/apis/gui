-- MysticOS GUI API

-- WIP --

--[[
TODO:
	+ menus
	+ line & text edit
--]]

-- Helper functions

local function checkBounds(x, y, w, h, px, py)
	return px >= x and px < x + w and py >= y and py < y + h
end

local function checkControlBounds(ctrl, x, y)
	return checkBounds(ctrl.x, ctrl.y, ctrl.width, ctrl.height, x, y)
end

-- GUI Object

Object = class.new("gui.Object")

function Object:initialize(x, y, w, h)
	self.x = x
	self.y = y
	self.width = w
	self.height = h
end

function Object:getPos()
	return self.x, self.y
end

function Object:setPos(x, y)
	self.x = x
	self.y = y
end

function Object:getX()
	return self.x
end

function Object:setX(x)
	self.x = x
end

function Object:getY()
	return self.y
end

function Object:setY(y)
	self.y = y
end

function Object:getSize()
	return self.width, self.height
end

function Object:getWidth()
	return self.width
end

function Object:getHeight()
	return self.height
end

function Object:resize(w, h)
	self.width = w
	self.height = h
end

-- Component

Component = class.new("gui.Component", Object)

function Component:initialize(x, y, w, h)
	Object.initialize(self, x, y, w, h)
	self.bgColor = colors.black
	self.txtColor = colors.white
	self.focusable = true
	self.visible = true
	self.cursorBlink = false
	self.cursorX = 1
	self.cursorY = 1
end

function Component:setBackgroundColor(c)
	self.bgColor = c
end
Component.setBackgroundColour = Component.setBackgroundColor

function Component:getBackgroundColor()
	return self.bgColor
end
Component.getBackgroundColour = Component.getBackgroundColor

function Component:setTextColor(c)
	self.txtColor = c
end
Component.setTextColour = Component.setTextColor

function Component:getTextColor()
	return self.txtColor
end
Component.getTextColour = Component.getTextColor

function Component:setFocusable(b)
	self.focusable = b
end

function Component:isFocusable()
	return self.focusable
end

function Component:setVisible(b)
	self.visible = b
end

function Component:isVisible()
	return self.visible
end

function Component:setCursorPos(x, y)
	self.cursorX = x
	self.cursorY = y
end

function Component:getCursorPos()
	return self.cursorX, self.cursorY
end

function Component:setCursorBlink(b)
	self.cursorBlink = b
end

function Component:getCursorBlink()
	return self.cursorBlink
end

function Component:write(target, sText)
	-- TODO --
end

function Component:print(target, ...)
	local nLines = 0
	for i = 1, #arg do
		nLines = nLines + self:write(target, tostring(arg[i]))
	end
	nLines = nLines + self:write(target, "\n")
	return nLines
end

function Component:clear(target)
	local line = string.rep(" ", self.width)
	for y = 0, self.height - 1 do
		target.write(line, self.x, self.y + y)
	end
end

function Component:clearLine(target, y)
	target.write(string.rep(" ", self.width), self.x, self.y + y - 1)
end

function Component:drawRect(target, x, y, w, h)
	local line = string.rep(" ", w)
	for i = 0, h - 1 do
		target.write(line, x, y + i)
	end
end

function Component:draw(target)
	target.setBackgroundColor(self.bgColor)
	target.setTextColor(self.txtColor)
	self:clear(target)
end

-- View

View = class.new("gui.View", Object)

function View:initialize(x, y, w, h)
	Object.initialize(self, x, y, w, h)
	self.childs = {}
	self.bgColor = colors.black
	local buff = screenbuffer.new(w, h)
	self.buffer = buff
	self.drawTarget = {
		drawBuffer = function(buff, x, y, w, h) buff:drawBuffer(buff, x, y, w, h) end,
		drawImage = function(img, x, y, w, h, ox, oy) buff:drawImage(img, x, y, w, h, ox, oy) end,
		write = function(txt, x, y) buff:write(txt, x, y) end,
		read = function(len, x, y) return buff:read(len, x, y) end,
		clear = function(c) buff:clear(c) end,
		clearLine = function(y) buff:clearLine(y) end,
		getSize = function() return buff:getSize() end,
		getWidth = function() return buff:getWidth() end,
		getHeight = function() return buff:getHeight() end,
		getCursorPos = function() return buff:getCursorPos() end,
		setCursorPos = function(x, y) buff:setCursorPos(x, y) end,
		setCursorBlink = function(b) buff:setCursorBlink(b) end,
		getCursorBlink = function() return buff:getCursorBlink() end,
		scroll = function(n) buff:scroll(n) end,
		setTextColor = function(c, x, y) buff:setTextColor(c, x, y) end,
		setTextColour = function(c, x, y) buff:setTextColor(c, x, y) end,
		getTextColor = function(x, y) return buff:getTextColor(x, y) end,
		getTextColour = function(x, y) return buff:getTextColor(x, y) end,
		setBackgroundColor = function(c, x, y) buff:setBackgroundColor(c, x, y) end,
		setBackgroundColour = function(c, x, y) buff:setBackgroundColor(c, x, y) end,
		getBackgroundColor = function(x, y) return buff:getBackgroundColor(x, y) end,
		getBackgroundColour = function(x, y) return buff:getBackgroundColor(x, y) end,
		setChar = function(c, x, y) buff:setChar(c, x, y) end,
		getChar = function(x, y) return buff:getChar(x, y) end,
		drawChar = function(c, x, y) buff:drawChar(c, x, y) end,
		snapshot = function() return buff:snapshot() end
	}
end

function View:addChild(child)
	class.checkClass(child, Component)
	if child.parent then
		child.parent:removeChild(child)
	end
	child.parent = self
	self.childs[#self.childs + 1] = child
end

function View:removeChild(child)
	for i = 1, #self.childs do
		if self.childs[i] == child then
			table.remove(self.childs, i)
			child.parent = nil
			break
		end
	end
end

function View:setFocus(child)
	if table.contains(self.childs, child) then
		self.focusedChild = child
	end
end

function View:handleEvent(evt, ...)
	if evt == "mouse_click" then
		return self:onMouseClick(...)
	elseif evt == "mouse_drag" then
		return self:onMouseDrag(...)
	elseif evt == "mouse_scroll" then
		return self:onMouseScroll(...)
	elseif evt == "key" then
		return self:onKeyDown(...)
	elseif evt == "char" then
		return self:onChar(...)
	else
		for i = 1, #self.childs do
			local child = self.childs[i]
			if child.handleEvent and child:handleEvent(evt, ...) then
				return true
			end
		end
	end
	return false
end

function View:onMouseClick(btn, x, y)
	for i = 1, #self.childs do
		local child = self.childs[i]
		if child:isFocusable() and checkControlBounds(child, x, y) then
			self:setFocus(child)
			if child.onMouseClick then
				child:onMouseClick(btn, (x - child.x) + 1, (y - child.y) + 1)
			end
			return true
		end
	end
	return false
end

function View:onMouseDrag(btn, x, y)
	for i = 1, #self.childs do
		local child = self.childs[i]
		if child:isFocusable() and checkControlBounds(child, x, y) then
			self:setFocus(child) -- TODO
			if child.onMouseDrag then
				child:onMouseDrag(btn, (x - child.x) + 1, (y - child.y) + 1)
			end
			return true
		end
	end
	return false
end

function View:onMouseScroll(dir, x, y)
	for i = 1, #self.childs do
		local child = self.childs[i]
		if checkControlBounds(child, x, y) then
			if child.onMouseScroll then
				child:onMouseScroll(dir)
			end
			return true
		end
	end
	return false
end

function View:onKeyDown(key)
	-- TODO: tab -> switch focus?
	if self.focusedChild and self.focusedChild.onKeyDown then
		self.focusedChild:onKeyDown(key)
		return true
	end
	return false
end

function View:onChar(char)
	if self.focusedChild and self.focusedChild.onChar then
		self.focusedChild:onChar(char)
		return true
	end
	return false
end

function View:setBackgroundColor(c)
	self.bgColor = c
end
View.setBackgroundColour = View.setBackgroundColor

function View:getBackgroundColor()
	return self.bgColor
end
View.getBackgroundColour = View.getBackgroundColor

function View:resize(w, h)
	Object.resize(self, w, h)
	self.buffer:resize(w, h)
end

function View:draw(target)
	self.buffer:setBackgroundColor(self.bgColor)
	self.buffer:clear()
	for i = 1, #self.childs do
		if self.childs[i]:isVisible() then
			self.childs[i]:draw(self.drawTarget)
		end
	end
	if self.focusedChild then
		local x, y = self.focusedChild:getCursorPos()
		self.buffer:setCursorPos(x, y)
		self.buffer:setCursorBlink(self.focusedChild:getCursorBlink())
	else
		self.buffer:setCursorBlink(false)
	end
	self.buffer:render(target)
end

-- Frame

Frame = class.new("gui.Frame")

function Frame:initialize(view)
	if view then
		class.checkClass(view, View)
		self.view = view
	end
	self.bExit = false
end

function Frame:close()
	self.bExit = true
end
Frame.exit = Frame.close

function Frame:setView(view)
	class.checkClass(view, View)
	self.view = view
end

function Frame:getView()
	return self.view
end

function Frame:start(target)
	target = target or display
	local ok, err = thread.new(function()
		while not self.bExit do
			self.view:draw(target)
			self.view:handleEvent(coroutine.yield())
		end
	end)
	if ok then
		os.queueEvent("gui_start")
	else
		error(err, 2)
	end
end

-- Label

Label = class.new("gui.Label", Component)

function Label:initialize(x, y, w, h, txt)
	Component.initialize(self, x, y, w, h)
	self.text = txt
	self:setFocusable(false)
end

function Label:draw(target)
	Component.draw(self, target)
	self:setCursorPos(1, 1)
	self:write(target, self.text)
end

function Label:setText(txt)
	self.text = txt
end

function Label:getText()
	return self.text
end

-- Button

Button = class.new("gui.Button", Component)

function Button:initialize(x, y, w, h, txt, callback)
	Component.initialize(self, x, y, w, h)
	self.text = txt or ""
	self.callback = callback
end

function Button:draw(target)
	Component.draw(self, target)
	local len = math.min(#self.text, self.width)
	local txt = string.sub(self.text, 1, len)
	local x = math.ceil((self.width - len) / 2)
	local y = math.ceil(self.height / 2) - 1
	target.write(txt, self.x + x, self.y + y)
end

function Button:setText(txt)
	self.text = txt
end

function Button:getText()
	return self.text
end

function Button:onMouseClick(btn, x, y)
	if btn == 1 and self.callback then
		self.callback()
	end
end

function Button:onKey(key)
	if self.callback and key == keys.enter or key == keys.space then
		self.callback()
	end
end

-- Image Button

ImageButton = class.new("gui.ImageButton", Component)

function ImageButton:initialize(x, y, w, h, img, callback)
	Component.initialize(self, x, y, w, h)
	if type(img) == "string" then
		self.image = imageio.load(img)
	else
		self.image = img
	end
	self.callback = callback
end

function ImageButton:draw(target)
	if self.image then
		local w = math.min(self.image:getWidth(), self.width)
		local h = math.min(self.image:getHeight(), self.height)
		target.drawImage(self.image, self.x, self.y, w, h)
	end
end

function ImageButton:setImage(img)
	self.image = img
end

function ImageButton:onMouseClick(btn, x, y)
	if btn == 1 and self.callback then
		self.callback()
	end
end

function ImageButton:onKey(key)
	if self.callback and key == keys.enter or key == keys.space then
		self.callback()
	end
end

-- List

List = class.new("gui.List", Component)

function List:initialize(x, y, w, h, l, selectCallback, changeCallback)
	Component.initialize(self, x, y, w, h)
	self.list = l or {}
	self.scroll = 0
	self.selected = 1
	self.selectCallback = selectCallback
	self.changeCallback = changeCallback
end

function List:draw(target)
	for i = 1, math.min(#self.list, self.height) do
		if i + self.scroll == self.selected then
			target.setBackgroundColor(self.txtColor)
			target.setTextColor(self.bgColor)
		else
			target.setBackgroundColor(self.bgColor)
			target.setTextColor(self.txtColor)
		end
		self:clearLine(target, i)
		target.write(string.sub(tostring(self.list[i + self.scroll]), 1, self.width), self.x, self.y + i - 1)
	end
end

function List:getList()
	return self.list
end

function List:setList(l)
	self.list = l
end

function List:scroll(n)
	if self.list then
		self.scroll = math.max(math.min(self.scroll + n, #self.list - self:getHeight()), 0)
	end
end

function List:setSelected(n)
	if self.list then
		if n ~= self.selected and n > 0 and n <= #self.list then
			self.selected = n
			if self.selected - self.scroll > self:getHeight() then
				self.scroll = self.selected - self:getHeight()
			elseif self.selected - self.scroll < 1 then
				self.scroll = self.selected - 1
			end
			if self.changeCallback then
				self.changeCallback(n)
			end
		end
	end
end

function List:getSelected()
	return self.list[self.selected]
end

function List:next()
	if self.selected < #self.list then
		self:setSelected(self.selected + 1)
	else
		self:setSelected(1)
	end
end

function List:prev()
	if self.selected > 1 then
		self:setSelected(self.selected - 1)
	else
		self:setSelected(#self.list)
	end
end

function List:onMouseClick(btn, x, y)
	if self.list then
		y = y + self.scroll
		if btn == 1 and y <= #self.list then
			if y == nSelected then
				if self.selectCallback then
					self.selectCallback(y)
				end
			else
				self:setSelected(y)
			end
		end
	end
end

function List:onMouseScroll(dir)
	self:scroll(dir)
end

function List:onKeyDown(key)
	if key == keys.down then
		self:next()
	elseif key == keys.up then
		self:prev()
	elseif key == keys["end"] then
		self:setSelected(#self.list)
	elseif key == keys.home then
		self:setSelected(1)
	elseif key == keys.enter then
		if self.selectCallback then
			self.selectCallback(self.selected)
		end
	end
end

-- Bar Control

Bar = class.new("gui.Bar", Component)

function Bar:initialize(x, y, w)
	Component.initialize(self, x, y, w, 1)
	self.fillColor = colors.white
	self.fill = 0
	self.setFocusable(false)
end

function Bar:draw(target)
	Component.draw(self, target)
	target.setBackgroundColor(self.fillColor)
	local w = math.floor(self.width * self.fill)
	target.write(string.rep(" ", w), self.x, self.y)
end

function Bar:getFillColor()
	return self.fillColor
end

function Bar:setFillColor(c)
	self.fillColor = c
end

function Bar:getFill()
	return self.fill
end

function Bar:setFill(n)
	self.fill = math.max(math.min(n, 1), 0)
end

-- Slider Bar Control

SliderBar = class.new("gui.SliderBar", Bar)

function SliderBar:initialize(x, y, w, callback)
	Bar.initialize(self, x, y, w)
	self.active = true
	self.onClick = callback
	self.setFocusable(true)
end

function SliderBar:isActive()
	return self.active
end

function SliderBar:setActive(b)
	self.active = b
end

function SliderBar:onMouseClick(btn, x, y)
	if self.active and btn == 1 then
		self.fill = x / self:getWidth()
		if self.callback then
			self.callback(self.fill)
		end
	end
end
SliderBar.onMouseDrag = SliderBar.onMouseClick

-- Canvas

Canvas = class.new("gui.Canvas", Component)

function Canvas:initialize(x, y, w, h, imgW, imgH)
	Component.initialize(self, x, y, w, h)
	self.img = image.new(imgW, imgH)
	self.ox = 0
	self.oy = 0
	self:setBackgroundColor(colors.lightGray)
	self.img:setBackgroundColor(colors.white)
	self.img:clear()
end

function Canvas:draw(target)
	Component.draw(self, target)
	target.drawImage(self.img, self.x, self.y, self.width, self.height, self.ox, self.oy)
end

function Canvas:setOffset(ox, oy)
	self.ox = ox
	self.oy = oy
end

function Canvas:getImage()
	return self.img
end