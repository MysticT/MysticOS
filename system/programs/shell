-- MysticOS Shell

local parentShell = shell

local bExit = false
local sDir = (parentShell and parentShell.dir()) or ""
local sPath = (parentShell and parentShell.path()) or ".:/system/programs:/rom/programs:/usr/programs"
local tAliases = (parentShell and parentShell.aliases()) or {}
local tProgramStack = {}
local tCommandHistory = {}

local shell = {}
local tShellEnv = { ["shell"] = shell }
tShellEnv._G = tShellEnv
setmetatable(tShellEnv, { __index = getfenv() })

local function run(sCmd, ...)
	local sPath = shell.resolveProgram(sCmd)
	if sPath then
		tProgramStack[#tProgramStack + 1] = sPath
		local tResults = { os.run(tShellEnv, sPath, ...) }
		tProgramStack[#tProgramStack] = nil
		return unpack(tResults)
	end
	printError("No such program")
	return false
end

local function runLine(sLine)
	local tWords = textutils.splitArgs(sLine)
	if #tWords > 0 then
		return run(unpack(tWords))
	end
	return false
end

-- Shell API

function shell.run(...)
	return runLine(table.concat({...}, " "))
end

function shell.exit()
    bExit = true
end

function shell.dir()
	return sDir
end

function shell.setDir(dir)
	sDir = dir
end

function shell.path()
	return sPath
end

function shell.setPath(path)
	sPath = path
end

function shell.resolve(sPath)
	local sStartChar = string.at(sPath, 1)
	if sStartChar == "/" or sStartChar == "\\" then
		return fs.resolvePath(sPath)
	else
		return fs.combine(sDir, sPath)
	end
end

function shell.resolveProgram(sCommand)
	if tAliases[sCommand] then
		sCommand = tAliases[sCommand]
	end
	local sStartChar = string.at(sCommand, 1)
	if sStartChar == "/" or sStartChar == "\\" then
		local sPath = fs.resolvePath(sCommand)
		if fs.exists(sPath) and not fs.isDir(sPath) then
			return sPath
		end
		return nil
	end
	for path in string.gmatch(sPath, "[^:]+") do
		path = fs.combine(shell.resolve(path), sCommand)
		if fs.exists(path) and not fs.isDir(path) then
			return path
		end
	end
	return nil
end

function shell.programs(bIncludeHidden)
	local tItems = {}
    for path in string.gmatch(sPath, "[^:]+") do
		path = shell.resolve(path)
		if fs.isDir(path) then
			local tList = fs.list(path, bIncludeHidden)
			for i = 1, #tList do
				if not fs.isDir(fs.combine(path, tList[i])) then
					tItems[tList[i]] = true
				end
			end
		end
    end	
	local tItemList = {}
	for sItem in pairs(tItems) do
		tItemList[#tItemList + 1] = sItem
	end
	table.sort(tItemList)
	return tItemList
end

function shell.getRunningProgram()
	if #tProgramStack > 0 then
		return tProgramStack[#tProgramStack]
	end
	return nil
end

function shell.setAlias(sCommand, sProgram)
	tAliases[sCommand] = sProgram
end

function shell.clearAlias(sCommand)
	tAliases[sCommand] = nil
end

function shell.aliases()
	return table.copy(tAliases)
end

-- Main loop

term.setBackgroundColor(colors.black)
term.setTextColor(term.isColor() and colors.yellow or colors.white)
print(os.version())
term.setTextColor(colors.white)

if not parentShell then
	local sRomStartup = shell.resolveProgram("/rom/startup")
	if sRomStartup then
		shell.run(sRomStartup)
	end
	-- TODO: user startup?
end

local tArgs = {...}
if #tArgs > 0 then
	shell.run(...)
end

while not bExit do
	term.setBackgroundColor(colors.black)
	term.setTextColor(term.isColor() and colors.yellow or colors.white)
	write(sDir.."> ")
	term.setTextColor(colors.white)
	local sLine = read(nil, tCommandHistory)
	tCommandHistory[#tCommandHistory + 1] = sLine
	local ok, err = runLine(sLine)
	if not ok and err ~= nil and err ~= "" then
		printError(err)
	end
end