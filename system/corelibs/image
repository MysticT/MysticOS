-- MysticOS Image Library

-- Image Class

local Image = class.new("Image")

function Image:initialize(w, h)
	self.width = w
	self.height = h
	self.text = {}
	self.bgColor = {}
	self.txtColor = {}
	self.curBgColor = colors.black
	self.curTxtColor = colors.white
	local sBlank = string.rep(" ", w)
	local sColor = string.rep(colors.toString(colors.black), w)
	for y = 1, h do
		self.text[y] = sBlank
		self.bgColor[y] = sColor
		self.txtColor[y] = sColor
	end
end

function Image:render(target, ox, oy)
	target = target or screen
	ox = ox or 1
	oy = oy or 1
	for y = 1, self.height do
		target.setCursorPos(ox, oy + y - 1)
		local i = 1
		local txt = self.text[y]
		local sBgColor = self.bgColor[y]
		local sTxtColor = self.txtColor[y]
		while i <= self.width do
			local bgColor = colors.fromString(sBgColor, i)
			local txtColor = colors.fromString(sTxtColor, i)
			j = i
			i = i + 1
			while i <= self.width and bgColor == colors.fromString(sBgColor, i) and
					txtColor == colors.fromString(sTxtColor, i) do
				i = i + 1
			end
			target.setBackgroundColor(bgColor)
			target.setTextColor(txtColor)
			target.write(string.sub(txt, j, i - 1))
		end
	end
end

function Image:draw(src, x, y, w, h, ox, oy)
	x = x or 1
	y = y or 1
	ox = ox or 0
	oy = oy or 0
	w = w and math.min(w, src.width - ox) or src.width - ox
	h = h and math.min(h, src.height - oy) or src.height - oy
	if x <= self.width and y <= self.height then
		local sx, sy = 1, 1
		if x < 1 then
			w = w + x - 1
			sx = -x + 1
			x = 1
		end
		if x + w - 1 > self.width then
			w = self.width - x + 1
		end
		if y < 1 then
			h = h + y - 1
			sy = -y + 1
			y = 1
		end
		if y + h - 1 > self.height then
			h = self.height - y + 1
		end
		for i = 0, h - 1 do
			self.bgColor[y+i] = string.replace(self.bgColor[y+i], x, x + w - 1, string.sub(src.bgColor[oy+sy+i], ox + sx, ox + sx + w))
			self.txtColor[y+i] = string.replace(self.txtColor[y+i], x, x + w - 1, string.sub(src.txtColor[oy+sy+i], ox + sx, ox + sx + w))
			self.text[y+i] = string.replace(self.text[y+i], x, x + w - 1, string.sub(src.text[oy+sy+i], ox + sx, ox + sx + w))
		end
	end
end

function Image:write(x, y, txt)
	if x <= self.width and y > 0 and y <= self.height then
		if x < 1 then
			txt = string.sub(txt, -x + 1)
			x = 1
		end
		if x + #txt - 1 > self.width then
			txt = string.sub(txt, 1, (self.width - x) + 1)
		end
		self.bgColor[y] = string.replace(self.bgColor[y], x, x + #txt - 1, string.rep(colors.toString(self.curBgColor), #txt))
		self.txtColor[y] = string.replace(self.txtColor[y], x, x + #txt - 1, string.rep(colors.toString(self.curTxtColor), #txt))
		self.text[y] = string.replace(self.text[y], x, x + #txt - 1, txt)
		return #txt
	end
	return 0
end

function Image:read(x, y, len)
	if x <= self.width and y > 0 and y <= self.height then
		if x < 1 then
			len = len + x - 1
			x = 1
		end
		return string.sub(self.text[y], x, x + len)
	end
end

function Image:clear(c)
	local sBlank = string.rep(" ", self.width)
	local sBgColor = string.rep(colors.toString(c or self.curBgColor), self.width)
	local sTxtColor = string.rep(colors.toString(self.curTxtColor), self.width)
	for y = 1, self.height do
		self.text[y] = sBlank
		self.bgColor[y] = sBgColor
		self.txtColor[y] = sTxtColor
	end
end

function Image:clearLine(y)
	if y > 0 and y <= self.height then
		self.text[y] = string.rep(" ", self.width)
		self.bgColor[y] = string.rep(colors.toString(self.curBgColor), self.width)
		self.txtColor[y] = string.rep(colors.toString(self.curTxtColor), self.width)
	end
end

function Image:getSize()
	return self.width, self.height
end

function Image:getWidth()
	return self.width
end

function Image:getHeight()
	return self.height
end

function Image:scroll(n)
	n = n or 1
	if n >= self.height or n <= -self.height then
		self:clear()
	elseif n > 0 then
		for y = 1, self.height - n do
			self.text[y] = self.text[y + n]
			self.bgColor[y] = self.bgColor[y + n]
			self.txtColor[y] = self.txtColor[y + n]
		end
		local sBlank = string.rep(" ", self.width)
		local sBgColor = string.rep(colors.toString(self.curBgColor), self.width)
		local sTxtColor = string.rep(colors.toString(self.curTxtColor), self.width)
		for y = (self.height - n) + 1, self.height do
			self.text[y] = sBlank
			self.bgColor[y] = sBgColor
			self.txtColor[y] = sTxtColor
		end
	elseif n < 0 then
		n = -n
		for y = self.height, 1 + n, -1 do
			self.text[y] = self.text[y - n]
			self.bgColor[y] = self.bgColor[y - n]
			self.txtColor[y] = self.txtColor[y - n]
		end
		local sBlank = string.rep(" ", self.width)
		local sBgColor = string.rep(colors.toString(self.curBgColor), self.width)
		local sTxtColor = string.rep(colors.toString(self.curTxtColor), self.width)
		for y = 1, n do
			self.text[y] = sBlank
			self.bgColor[y] = sBgColor
			self.txtColor[y] = sTxtColor
		end
	end
end

function Image:setTextColor(c, x, y)
	if x and y then
		if x > 0 and x <= self.width and y > 0 and y <= self.height then
			self.txtColor[y] = string.set(self.txtColor[y], x, colors.toString(c))
		end
	else
		self.curTxtColor = c
	end
end
Image.setTextColour = Image.setTextColor

function Image:getTextColor(x, y)
	if x and y then
		if x > 0 and x <= self.width and y > 0 and y <= self.height then
			return colors.fromString(string.at(self.txtColor[y], x))
		end
	else
		return self.curTxtColor
	end
end
Image.getTextColour = Image.getTextColor

function Image:setBackgroundColor(c, x, y)
	if x and y then
		if x > 0 and x <= self.width and y > 0 and y <= self.height then
			self.bgColor[y] = string.set(self.bgColor[y], x, colors.toString(c))
		end
	else
		self.curBgColor = c
	end
end
Image.setBackgroundColour = Image.setBackgroundColor

function Image:getBackgroundColor(x, y)
	if x and y then
		if x > 0 and x <= self.width and y > 0 and y <= self.height then
			return colors.fromString(string.at(self.bgColor[y], x))
		end
	else
		return self.curBgColor
	end
end
Image.getBackgroundColour = Image.getBackgroundColor

function Image:setChar(x, y, c)
	if x > 0 and x <= self.width and y > 0 and y <= self.height then
		self.text[y] = string.set(self.text[y], x, string.at(tostring(c), 1))
	end
end

function Image:getChar(x, y)
	if x > 0 and x <= self.width and y > 0 and y <= self.height then
		return string.at(self.text[y], x)
	end
end

function Image:drawChar(x, y, c)
	if x > 0 and x <= self.width and y > 0 and y <= self.height then
		self.bgColor[y] = string.set(self.bgColor[y], x, colors.toString(self.curBgColor))
		self.txtColor[y] = string.set(self.txtColor[y], x, colors.toString(self.curTxtColor))
		self.text[y] = string.set(self.text[y], x, string.at(tostring(c), 1))
	end
end

function Image:copy()
	local img = {}
	img.width = self.width
	img.height = self.height
	img.text = {}
	img.bgColor = {}
	img.txtColor = {}
	img.curBgColor = self.curBgColor
	img.curTxtColor = self.curTxtColor
	for y = 1, self.height do
		img.text[y] = self.text[y]
		img.bgColor[y] = self.bgColor[y]
		img.txtColor[y] = self.txtColor[y]
	end
	return setmetatable(img, { __index = Image, __metatable = "Image" })
end

function Image:resize(width, height)
	if self.width ~= width or self.height ~= height then
		local h = math.min(self.height, height)
		if width > self.width then
			local diff = width - self.width
			local sBlank = string.rep(" ", diff)
			local sTxtColor = string.rep(colors.toString(self.curTxtColor), diff)
			local sBackColor = string.rep(colors.toString(self.curBgColor), diff)
			for y = 1, h do
				self.text[y] = self.text[y]..sBlank
				self.txtColor[y] = self.txtColor[y]..sTxtColor
				self.bgColor[y] = self.bgColor[y]..sBackColor
			end
		else
			for y = 1, h do
				self.text[y] = string.sub(self.text[y], 1, width)
				self.txtColor[y] = string.sub(self.txtColor[y], 1, width)
				self.bgColor[y] = string.sub(self.bgColor[y], 1, width)
			end
		end
		if height > self.height then
			local w = math.max(self.width, width)
			local sBlank = string.rep(" ", w)
			local sTxtColor = string.rep(colors.toString(self.curTxtColor), w)
			local sBackColor = string.rep(colors.toString(self.curBgColor), w)
			for y = self.height + 1, height do
				self.text[y] = sBlank
				self.bgColor[y] = sTxtColor
				self.txtColor[y] = sBackColor
			end
		else
			for y = height + 1, self.height do
				self.text[y] = nil
				self.bgColor[y] = nil
				self.txtColor[y] = nil
			end
		end
		self.width = width
		self.height = height
	end
end

function Image:save(path, format)
	return imageio.save(self, path, format or "MIF")
end

-- API

function new(w, h)
	return Image(w, h)
end