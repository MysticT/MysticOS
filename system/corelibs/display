-- MysticOS Display Library

local tDisplays = {}
local frontDisplay
local curDisplay
local lastID = 0
local screenW, screenH

local bRedraw = false
local nRedrawDelay = 0.1
local redrawTimer

BG_COLOR = 1
BG_IMAGE = 2

local desktopImgPath
local desktopImage

local function getDisplay()
	return curDisplay and tDisplays[curDisplay]
end

local function getFrontDisplay()
	return frontDisplay and tDisplays[frontDisplay]
end

local function addDisplay(disp)
	lastID = lastID + 1
	tDisplays[lastID] = disp
	return lastID
end

-- Draw methods

local function centerWrite(txt)
	local x, y = screen.getCursorPos()
	local w, h = screen.getSize()
	x = math.floor((w / 2) - (#txt / 2))
	screen.setCursorPos(x, y)
	screen.write(txt)
end

local function drawBackground()
	local bgType = sysconfig.get("desktopType")
	if bgType == BG_COLOR then
		local bgColor = sysconfig.get("desktopBgColor")
		local txtColor = sysconfig.get("desktopTxtColor")
		screen.setBackgroundColor(bgColor)
		screen.clear()
		screen.setCursorPos(1, 1)
		screen.setTextColor(txtColor)
		centerWrite("MysticOS")
	elseif bgType == BG_IMAGE then
		local imgPath = sysconfig.get("desktopImagePath")
		if imgPath ~= desktopImagePath then
			desktopImage = image.load(imgPath)
			if desktopImage then
				desktopImagePath = imgPath
			end
		end
		if desktopImage then
			desktopImage:render()
		end
	end
	screen.setCursorPos(1, 1)
	screen.setCursorBlink(false)
end

local function drawDisplay()
	local disp = getFrontDisplay()
	if disp then
		disp:render(screen)
	else
		drawBackground()
	end
end

local function drawScreen()
	if bRedraw then
		screen.setCursorBlink(false)
		drawDisplay()
		bRedraw = false
	end
end

local function redrawDisplay()
	if curDisplay == frontDisplay and tDisplays[curDisplay]:needsRedraw() then
		redraw()
	end
end

local function redrawAll()
	local disp = getFrontDisplay()
	if disp then
		disp:redraw()
	end
	redraw()
end

-- Display API

function redraw()
	if not bRedraw then
		bRedraw = true
		redrawTimer = os.startTimer(nRedrawDelay)
	end
end

function drawBuffer(buff, x, y, w, h)
	local disp = getDisplay()
	if disp then
		disp:drawBuffer(buff, x, y, w, h)
		redrawDisplay()
	end
end

function drawImage(img, x, y, w, h, ox, oy)
	local disp = getDisplay()
	if disp then
		disp:drawImage(img, x, y, w, h, ox, oy)
		redrawDisplay()
	end
end

function write(txt, x, y)
	local disp = getDisplay()
	if disp then
		disp:write(txt, x, y)
		redrawDisplay()
	end
end

function read(len, x, y)
	local disp = getDisplay()
	return disp and disp:read(len, x, y)
end

function clear(c)
	local disp = getDisplay()
	if disp then
		disp:clear(c)
		redrawDisplay()
	end
end

function clearLine(y)
	local disp = getDisplay()
	if disp then
		disp:clearLine(y)
		redrawDisplay()
	end
end

function getSize()
	local disp = getDisplay()
	if disp then
		return disp:getSize()
	end
	return 0, 0
end

function getWidth()
	local disp = getDisplay()
	return disp and disp:getWidth() or 0
end

function getHeight()
	local disp = getDisplay()
	return disp and disp:getHeight() or 0
end

function getCursorPos()
	local disp = getDisplay()
	if disp then
		return disp:getCursorPos()
	end
	return 0, 0
end

function setCursorPos(x, y)
	local disp = getDisplay()
	if disp then
		disp:setCursorPos(x, y)
		redrawDisplay()
	end
end

function setCursorBlink(b)
	local disp = getDisplay()
	if disp then
		disp:setCursorBlink(b)
		redrawDisplay()
	end
end

function getCursorBlink()
	local disp = getDisplay()
	return disp and disp:getCursorBlink()
end

function scroll(n)
	local disp = getDisplay()
	if disp then
		disp:scroll(n)
		redrawDisplay()
	end
end

function setTextColor(c, x, y)
	local disp = getDisplay()
	if disp then
		disp:setTextColor(c, x, y)
		redrawDisplay()
	end
end
setTextColour = setTextColor

function getTextColor(x, y)
	local disp = getDisplay()
	return disp and disp:getTextColor(x, y) or 0
end
getTextColour = getTextColor

function setBackgroundColor(c, x, y)
	local disp = getDisplay()
	if disp then
		disp:setBackgroundColor(c, x, y)
		redrawDisplay()
	end
end
setBackgroundColour = setBackgroundColor

function getBackgroundColor(x, y)
	local disp = getDisplay()
	return disp and disp:getBackgroundColor(x, y) or 0
end
getBackgroundColour = getBackgroundColor

function setChar(c, x, y)
	local disp = getDisplay()
	if disp then
		disp:setChar(c, x, y)
		redrawDisplay()
	end
end

function getChar(x, y)
	local disp = getDisplay()
	return disp and disp:getChar(x, y)
end

function drawChar(c, x, y)
	local disp = getDisplay()
	if disp then
		disp:drawChar(c, x, y)
		redrawDisplay()
	end
end

function snapshot()
	local disp = getDisplay()
	return disp and disp:snapshot()
end

function isColor()
	return screen.isColor()
end
isColour = isColor

function new()
	return addDisplay(screenbuffer.new(screenW, screenH))
end

function remove(id)
	tDisplays[id] = nil
	if id == curDisplay then
		curDisplay = nil
	end
	if id == frontDisplay then
		frontDisplay = nil
		redraw()
	end
end

function setCurrent(id)
	if tDisplays[id] then
		if id ~= curDisplay then
			curDisplay = id
		end
		return true
	end
	return false
end

function setFront(id)
	if id == 0 then
		frontDisplay = nil
		redraw()
	elseif tDisplays[id] then
		if id ~= frontDisplay then
			frontDisplay = id
			redrawAll()
		end
		return true
	end
	return false
end

function getCurrent()
	return curDisplay
end

function getFront()
	return frontDisplay
end

-- Event Handlers

local function handleTimer(timer)
	if timer == redrawTimer then
		drawScreen()
		return true
	end
end

local bInit = false
function init()
	if not bInit then
		screenW, screenH = screen.getSize()
		events.addHandler("timer", handleTimer)
		bInit = true
	end
end