-- MysticOS File System

local native = fs
local tOpenFiles = {}

local function getByte(n, i)
	return bit.band(bit.brshift(n, i * 8), 0xFF)
end

local function getSignedByte(n)
	return (n > 127) and (n - 256) or n
end

local function getSignedShort(n)
	return (n > 32767) and (n - 65536) or n
end

local function getSignedInt(n)
	return (n > 2147483647) and (n - 4294967296) or n
end

local function getUnsignedByte(n)
	return bit.band(n, 0xFF)
end

local function getUnsignedShort(n)
	return bit.band(n, 0xFFFF)
end

local function getUnsignedInt(n)
	return bit.band(n, 0xFFFFFFFF)
end

local function readUByte(h)
	return h.read()
end

local function readByte(h)
	return getSignedByte(h.read())
end

local function readBytes(h, n)
	local t = {}
	if n then
		for i = 1, n do
			local b = h.read()
			if not b then
				break
			end
			t[#t + 1] = b
		end
	else
		while true do
			local b = h.read()
			if not b then
				break
			end
			t[#t + 1] = b
		end
	end
	return t
end

local function readUShortLE(h)
	return h.read() + h.read() * 256
end

local function readUShortBE(h)
	return h.read() *256 + h.read()
end

local function readShortLE(h)
	return getSignedShort(readUShortLE(h))
end

local function readShortBE(h)
	return getSignedShort(readUShortBE(h))
end

local function readUIntLE(h)
	return h.read() + h.read() * 256 + h.read() * 65536 + h.read() * 16777216
end

local function readUIntBE(h)
	return h.read() * 16777216 + h.read() * 65536 + h.read() * 256 + h.read()
end

local function readIntLE(h)
	return getSignedInt(readUIntLE(h))
end

local function readIntBE(h)
	return getSignedInt(readUIntBE(h))
end

local function readChar(h)
	return string.char(h.read())
end

local function readString(h, len)
	local s = ""
	if len then
		for i = 1, len do
			local c = h.read()
			if not c or c == 0 then
				break
			end
			s = s..string.char(c)
		end
	else
		while true do
			local c = h.read()
			if not c or c == 0 then
				break
			end
			s = s..string.char(c)
		end
	end
	return s
end

local function writeUByte(h, n)
	return h.write(n)
end

local function writeByte(h, n)
	return h.write(getUnsignedByte(n))
end

local function writeBytes(h, b)
	if type(b) == "table" then
		for i = 1, #b do
			h.write(b[i])
		end
	elseif type(b) == "string" then
		for i = 1, #b do
			h.write(string.byte(b, i))
		end
	end
end

local function writeUShortLE(h, n)
	h.write(getByte(n, 0))
	h.write(getByte(n, 1))
end

local function writeUShortBE(h, n)
	h.write(getByte(n, 1))
	h.write(getByte(n, 0))
end

local function writeShortLE(h, n)
	writeUShortLE(h, getUnsignedShort(n))
end

local function writeShortBE(h, n)
	writeUShortBE(h, getUnsignedShort(n))
end

local function writeUIntLE(h, n)
	h.write(getByte(n, 0))
	h.write(getByte(n, 1))
	h.write(getByte(n, 2))
	h.write(getByte(n, 3))
end

local function writeUIntBE(h, n)
	h.write(getByte(n, 3))
	h.write(getByte(n, 2))
	h.write(getByte(n, 1))
	h.write(getByte(n, 0))
end

local function writeIntLE(h, n)
	writeUIntLE(h, getUnsignedInt(n))
end

local function writeIntBE(h, n)
	writeUIntBE(h, getUnsignedInt(n))
end

local function writeChar(h, c)
	h.write(string.byte(c, 1))
end

local function writeString(h, s)
	for i = 1, #s do
		h.write(string.byte(s, i))
	end
	h.write(0)
end

local linkHdr = "::LINK::"

local function splitPath(sPath)
	local i = 1
	local t = {}
	sPath = native.combine(sPath, "")
	for path in string.gmatch(sPath, "[^/\\]*[/\\]?") do
		path = string.gsub(path, "[/\\]", "")
		if path == ".." then
			if i > 1 then
				i = i - 1
				t[i] = nil
			else
				return nil -- TODO
			end
		elseif path ~= "" and path ~= "." then
			t[i] = path
			i = i + 1
		end
	end
	return t
end

local function resolveLink(path)
	if native.exists(path) and not native.isDir(path) then
		local file = native.open(path, "rb")
		if file then
			if readString(file, #linkHdr) == linkHdr then
				path = readString(file)
			end
			file.close()
		end
	end
	return path
end

local function resolve(sPath, bFollowLinks)
	assert(type(sPath) == "string", "string expected, got "..type(sPath), 4)
	local t = splitPath(sPath)
	if t == nil then
		return nil
	end
	if bFollowLinks then
		local path = ""
		for i = 1, #t do
			path = resolveLink(path.."/"..t[i])
		end
		return path
	end
	return table.concat(t, "/")
end

local function openHandle(path, mode, pid, handle)
	tOpenFiles[path] = {
		mode = mode,
		pid = pid,
		handle = handle
	}
end

local function closeHandle(path)
	local file = tOpenFiles[path]
	if file then
		file.handle.close()
		tOpenFiles[path] = nil
	end
end

local function wrap(h, path, mode)
	if mode == "r" then
		return {
			readLine = function() return h.readLine() end,
			readAll = function() return h.readAll() end,
			close = function() closeHandle(path) end
		}
	elseif mode == "w" or mode == "a" then
		return {
			write = function(s) h.write(s) end,
			writeLine = function(s) h.writeLine(s) end,
			flush = function() h.flush() end,
			close = function() closeHandle(path) end
		}
	elseif mode == "rb" then
		return {
			read = function() return h.read() end,
			readUByte = function() return readUByte(h) end,
			readByte = function() return readByte(h) end,
			readBytes = function(n) return readBytes(h, n) end,
			readUShort = function() return readUShortLE(h) end,
			readShort = function() return readShortLE(h) end,
			readUShortLE = function() return readUShortLE(h) end,
			readUShortBE = function() return readUShortBE(h) end,
			readShortLE = function() return readShortLE(h) end,
			readShortBE = function() return readShortBE(h) end,
			readUInt = function() return readUIntLE(h) end,
			readInt = function() return readIntLE(h) end,
			readUIntLE = function() return readUIntLE(h) end,
			readUIntBE = function() return readUIntBE(h) end,
			readIntLE = function() return readIntLE(h) end,
			readIntBE = function() return readIntBE(h) end,
			readChar = function() return readChar(h) end,
			readString = function(len) return readString(h, len) end,
			close = function() closeHandle(path) end
		}
	elseif mode == "wb" or mode == "ab" then
		return {
			write = function(n) h.write(n) end,
			writeUByte = function(n) writeUByte(h, n) end,
			writeByte = function(n) writeByte(h, n) end,
			writeBytes = function(t) writeBytes(h, t) end,
			writeUShort = function(n) writeUShortLE(h, n) end,
			writeShort = function(n) writeShortLE(h, n) end,
			writeUShortLE = function(n) writeUShortLE(h, n) end,
			writeUShortBE = function(n) writeUShortBE(h, n) end,
			writeShortLE = function(n) writeShortLE(h, n) end,
			writeShortBE = function(n) writeShortBE(h, n) end,
			writeUInt = function(n) writeUIntLE(h, n) end,
			writeInt = function(n) writeIntLE(h, n) end,
			writeUIntLE = function(n) writeUIntLE(h, n) end,
			writeUIntBE = function(n) writeUIntBE(h, n) end,
			writeIntLE = function(n) writeIntLE(h, n) end,
			writeIntBE = function(n) writeIntBE(h, n) end,
			writeChar = function(c) writeChar(h, c) end,
			writeString = function(s) writeString(h, s) end,
			flush = function() h.flush() end,
			close = function() closeHandle(path) end
		}
	end
end

-- API

function resolvePath(path, bFollowLinks)
	return resolve(path, bFollowLinks)
end

function list(path, bIncludeHidden)
	local l = native.list(resolve(path, true))
	if bIncludeHidden then
		return l
	end
	local t = {}
	for i = 1, #l do
		if string.at(l[i], 1) ~= "." then
			t[#t + 1] = l[i]
		end
	end
	return t
end

function exists(path)
	return native.exists(resolve(path, true))
end

function isDir(path)
	return native.isDir(resolve(path, true))
end

function isFile(path)
	return not native.isDir(resolve(path, true))
end

function isReadOnly(path)
	return native.isReadOnly(resolve(path, true))
end

function getName(path, bRemoveExtension)
	local name = native.getName(path)
	if bRemoveExtension and string.find(name, "%..+") then
		name = string.match(name, "(.*)%..+$")
	end
	return name
end

function getExtension(path)
	local name = native.getName(path)
	if string.find(name, "%..+$") then
		return string.match(name, ".*%.(.+)$")
	end
	return ""
end

function getDir(path)
	path = resolve(path, false)
	local name = native.getName(path)
	return string.sub(path, 1, #path - #name)
end

function getDrive(path)
	return native.getDrive(resolve(path, true))
end

function getSize(path)
	return native.getSize(resolve(path, true))
end

function getFreeSpace(path)
	return native.getFreeSpace(resolve(path, true))
end

function makeDir(path)
	return native.makeDir(resolve(path, true))
end

function makePath(path)
	checkType(path, "string")
	local t = assert(splitPath(sPath), "Invalid Path", 2)
	local path = ""
	for i = 1, #t do
		path = resolveLink(path.."/"..t[i])
		if not native.exists(path) then
			native.makeDir(path)
		elseif not native.isDir(path) then
			error("Path contains a file", 2)
		end
	end
end

function move(srcPath, dstPath)
	return native.move(resolve(srcPath, true), resolve(dstPath, true))
end

function copy(srcPath, dstPath)
	return native.copy(resolve(srcPath, true), resolve(dstPath, true))
end

function delete(path)
	return native.delete(resolve(path, true))
end

function combine(basePath, localPath)
	return native.combine(basePath, localPath)
end

function isOpen(path)
	return tOpenFiles[resolve(path, true)] ~= nil
end

function makeLink(linkPath, dstPath)
	linkPath = resolve(linkPath, true)
	dstPath = resolve(dstPath, true)
	if native.exists(linkPath) or not native.exists(dstPath) then
		return false
	end
	local file = native.open(linkPath, "wb")
	if not file then
		return false
	end
	writeBytes(file, linkHdr)
	writeString(file, dstPath)
	file.close()
	return true
end

function isLink(path)
	local sDir = resolve(getDir(path), true)
	path = native.combine(sDir, native.getName(path))
	if native.exists(path) and not native.isDir(path) then
		local file = native.open(path, "rb")
		if file then
			local sHdr = readString(file, #linkHdr)
			file.close()
			return sHdr == linkHdr
		end
	end
	return false
end

function open(path, mode)
	path = resolve(path, true)
	if isOpen(path) then
		return nil
	end
	mode = mode or "r"
	local handle = native.open(path, mode)
	if handle then
		local h = wrap(handle, path, mode)
		openHandle(path, mode, proc.running(), handle)
		return h
	end
end

-- Event Handling

local function onProcessEnd(pid)
	for path, file in pairs(tOpenFiles) do
		if file.pid == pid then
			closeHandle(path)
		end
	end
end

local bInit = false
function init()
	if not bInit then
		events.addHandler("process_end", onProcessEnd)
		bInit = true
	end
end