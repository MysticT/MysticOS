Classes in the Utils Lib:
- String
	- new(val)
		* creates a new String object, containing the string val
		* return values:
			- the created String object (String)
		* parameters:
			- val: the value of the string (any type)
	- isEmpty()
		* checks if the string is empty
		* return values:
			- boolean indicating if the string is empty (boolean)
	- at(pos)
		* gets the character at the specified position of the string
		* return values:
			- the character at the specified position (string)
		* parameters:
			- pos: the character position (number)
	- byte(pos)
		* gets the byte at the specified position of the string
		* return values:
			- the byte at the specified position (number)
		* parameters:
			- pos: the byte position (number)
	- sub(start, end)
		* returns a the substring from position "start" to "end"
		* return values:
			- the substring (String)
		* parameters:
			- start: the starting position of the substring (number)
			- end: the end position of the substring (number) [optional]
	- lenght()
		* gets the lenght of the string
		* return values:
			- the lenght of the string (number)
	- append(val)
		* appends val to the end of the string
		* return values:
			- self (String)
		* parameters:
			- val: the value to append (any type)
	- prepend(val)
		* adds val to the start of the string
		* return values:
			- self (String)
		* parameters:
			- val: the value to append (any type)
	- fill(char, len)
		* fills the string with a character
		* return values:
			- self (String)
		* parameters:
			- char: the character to use to fill (string)
			- len: the lenght to fill (number) [optional]
	- insert(val, pos)
		* inserts val at the specified position of the string
		* return values:
			- self (String)
		* parameters:
			- val: the value to insert (any type)
			- pos: the position to insert (number)
	- replace(pos, len, val)
		* replaces the substring at the specified position and lenght with val
		* return values:
			- self (String)
		* parameters:
			- pos: the position to replace (number)
			- len: the lenght of the string to replace (number)
			- val: the value to replace (any type)
	- remove(pos, len)
		* removes the substring at the specified position and lenght
		* return values:
			- self (String)
		* parameters:
			- pos: the position of the substring to remove (number)
			- len: the lenght of the substring to remove (number)
	- chop(len)
		* removes len characters from the end of the string
		* return values:
			- self (String)
		* parameters:
			- len: the amount of characters to remove (number)
	- truncate(pos)
		* truncates the string at the specified position
		* return values:
			- self (String)
		* parameters:
			- pos: the position to truncate the string (number)
	- startsWith(val, plain)
		* checks if the string starts with val
		* return values:
			- boolean indicating if the string starts with val (boolean)
		* parameters:
			- val: the value to check (any type)
			- plain: true to use plain string instead of patterns (boolean) [optional]
	- endsWith(val, plain)
		* check if the string ends with val
		* return values:
			- boolean indicating if the string ends with val (boolean)
		* parameters:
			- val: the value to check (any type)
			- plain: true to use plain string instead of patterns (boolean) [optional]
	- indexOf(val, start, plain)
		* gets the index of the substring val
		* return values:
			- the index of the substring, nil if not found (number)
		* parameters:
			- val: the value to search (any type)
			- start: the starting position to search (number)
			- plain: true to use the plain string instead of patterns (boolean) [optional]
	- contains(val, plain)
		* checks if the string contains the substring val
		* return values:
			- boolean indicating if the substring is found (boolean)
		* parameters:
			- val: the value to check (any type)
			- plain: true to use the plain string instead of patterns (boolean) [optional]
	- count(val, plain)
		* gets the number of ocurrences of val on the string
		* return values:
			- the number of ocurrences (number)
		* parameters:
			- val: the value to search (any type)
			- plain: true to use the plain string instead of patterns (boolean) [optional]
	- left(len)
		* gets a substring containing the len leftmost characters of the string
		* return values:
			- the substring (String)
		* parameters:
			- len: the lenght of the substring (number)
	- leftJustified(len, char, truncate)
		* returns a string of size len that contains the string padded with char
		* return values:
			- the padded string (String)
		* parameters:
			- len: the lenght of the string (number)
			- char: the pad character (string)
			- truncate: if true and the lenght of the string is more than len, truncates the string (boolean) [optional]
	- mid(pos, len)
		* gets a substring from position pos of lenght len
		* return values:
			- the substring (String)
		* parameters:
			- pos: the position of the substring (number)
			- len: the lenght of the substring (number)
	- right(len)
		* gets a substring containing the len rightmost characters of the string
		* return values:
			- the substring (String)
		* parameters:
			- len: the lenght of the substring (number)
	- rightJustified(len, char, truncate)
		* returns a string of size len that contains char followed by the string
		* return values:
			- the padded string (String)
		* parameters:
			- len: the lenght of the string (number)
			- char: the pad character (string)
			- truncate: if true and the lenght of the string is more then len, truncates the string (boolean) [optional]
	- repeated(times)
		* returns a string that is a repetition of this string
		* return values:
			- the repeated string (String)
		* parameters:
			- times: the times to repeat the string (number)
	- simplified()
		* returns a string that has whitespace removed from the start and the end, and that has each sequence of internal whitespace replaced with a single space
		* return values:
			- the simplified string (String)
	- trimmed()
		* returns a string that has whitespace removed from the start and the end
		* return values:
			- the trimmed string (String)
	- lower()
		* returns a lowercase copy of the string
		* return values:
			- the lowercase string (String)
	- upper()
		* returns an uppercase copy of the string
		* return values:
			- the uppercase string (String)
	- split(sep, skipEmpty, plain)
		* splits the string into substrings wherever sep occurs
		* return values:
			- the list of substrings (table)
		* parameters:
			- sep: the separator string (any type)
			- skipEmpty: true to skip empty substrings (boolean) [optional]
			- plain: true to use the plain string instead of patterns (boolean) [optional]
	- section(sep, start, end, skipEmpty, plain, includeLeadingSep, includeTrailingSep)
		* returns a section of the string
		* this string is treated as a sequence of fields separated by sep
		* the returned string consists of the fields from position start to position end inclusive
		* return values:
			- the section of the string (String)
		* parameters:
			- sep: the separator string (any type)
			- start: the starting field position (number)
			- end: the end field position (number)
			- skipEmpty: true to skip empty substrings (boolean) [optional]
			- plain: true to use the plain string instead of patterns (boolean) [optional]
			- includeLeadingSep: true to include the leading separator (boolean) [optional]
			- includeTrailingSep: true to include the trailing separator (boolean) [optional]
	- reverse()
		* returns the string in reverse order
		* return values:
			- the reversed string (String)
	- toCharTable(start, end)
		* returns a table containing the string characters from position start to end
		* return values:
			- the characters table (table)
		* parameters:
			- start: the starting position (number) [optional]
			- end: the ending position (number) [optional]
	- toByteTable(start, end)
		* returns a table containing the string bytes from position start to end
		* return values:
			- the bytes table (table)
		* parameters:
			- start: the starting position (number) [optional]
			- end: the ending position (number) [optional]
	- fromCharTable(chars)
		* converts a table of characters to a String object
		* return values:
			- the created String object (String)
		* parameters:
			- chars: the characters table (table)
	- fromByteTable(bytes)
		* converts a table of bytes to a String object
		* return values:
			- the created String object (String)
		* parameters:
			- bytes: the bytes table (table)
	- toNumber()
		* converts the string to a number
		* return values:
			- the number, nil if it can't be converted (number, nil)
	- operators:
		* __tostring(): returns the string this object represents (string)
		* __add(obj): returns this string with obj appended at the end (String)
		* __concat(obj): returns this string with obj appended at the end (String)
		* __eq(obj): checks if this string equals obj (boolean)
		* __lt(obj): check if this string is less than obj (boolean)
		* __le(obj): check if this string is less than or equal to obj (boolean)
- Stack
	- push(val)
		* pushes a value on the stack
		* return value:
			- self (Stack)
		* parameters:
			- val: the value to push (any non-nil value)
	- pop()
		* pops a value from the stack
		* return value:
			- the poped value, nil if empty
	- top()
		* gets the top value of the stack
		* return value:
			- the top value, nil if empty
	- empty()
		* checks if the stack is empty
		* return value:
			- boolean indicating if the stack is empty (boolean)
- Queue
	- enqueue(val)
		* enqueue a value on the queue
		* return value:
			- self (Queue)
		* parameters:
			- val: the value to enqueue (any non-nil value)
	- dequeue()
		* removes the first value of the queue
		* return value:
			- the dequeued value, nil if empty
	- first()
		* gets the first value on the queue
		* return value:
			- the first value of the queue, nil if empty
	- empty()
		* checks if the queue is empty
		* return value:
			- boolean indicating if the queue is empty (boolean)
- Set
	- add(val)
		* adds a value to the set
		* return value:
			- self (Set)
		* parameters:
			- val: the value to add (any non-nil value)
	- remove(val)
		* removes a value from the set
		* return value:
			- self (Set)
		* parameters:
			- val: the value to remove (any non-nil value)
	- contains(val)
		* checks if the set has the given value
		* return value:
			- boolean indicating if set contains the value (boolean)
		* parameters:
			- val: the value to check (any non-nil value)
	- get()
		* gets a value from the set
		* return value:
			- a value from the set
	- empty()
		* checks if the set is empty
		* return value:
			- boolean indicating if the set is empty (boolean)
- Hash
	- add(key, val)
		* adds a key and it's value to the hash
		* return value:
			- self (Hash)
		* parameters:
			- key: the key (any non-nil value)
			- val: the value of the key (any non-nil value)
	- remove(key)
		* removes a key and it's associated value from the hash
		* return value:
			- self (Hash)
		* parameters:
			- key: the key to remove (any non-nil value)
	- get(key)
		* gets the value corresponding to the given key
		* return value:
			- the value corresponding to the key
		* parameters:
			- key: the key to get the value (any non-nil value)
	- keys()
		* gets a list of all the keys in the hash
		* return value:
			- the list of keys in the hash (table)
	- hasKey(key)
		* checks if the hash contains the given key
		* return value:
			- boolean indicating if the hash contains the key (boolean)
		* parameters:
			- key: the key to check (any non-nil value)
- MultiHash
	- add(key, val)
		* adds a key and a value to the multi-hash, if the key already exists it adds the value to that key
		* return value:
			- self (MultiHash)
		* parameters:
			- key: the key (any non-nil value)
			- val: the value to add to the key (any non-nil value)
	- remove(key, val)
		* removes the given value from the given key
		* return value:
			- self (MultiHash)
		* parameters:
			- key: the key to remove the value from (any non-nil value)
			- val: the value to remove (any non-nil value)
	- get(key)
		* gets the values associated to the given key
		* return value:
			- a table containing the values associated to the key (table)
		* parameters:
			- key: the key to get it's values (any non-nil value)
	- keys()
		* gets a list of all the keys in the multi-hash
		* return value:
			- the list of keys in the hash (table)
	- hasKey(key)
		* checks if the multi-hash contains the given key
		* return value:
			- boolean indicating if the multi-hash contains the key (boolean)
		* parameters:
			- key: the key to check (any non-nil value)

Functions in the Utils Lib:
	- formatString(fmt, args)
		* create a formatted string from the format and arguments provided
		* return values:
			- the formatted string (String)
		* parameters:
			- fmt: the format string to use (string)
			- args: the arguments to format (any type) [variable]
	- tabulate(width, args)
		* returns a string of tabulated tables into columns to fit the given width
		* return values:
			- the tabulated string (String)
		* parameters:
			- width: the maximum width (number)
			- args: the tables to tabulate (table) [variable]
	- formatTime(time, amPm)
		* returns a string representing the given time
		* return values:
			- the time string (String)
		* parameters:
			- time: the time to represent (number)
			- amPm: true to use am/pm representation (boolean) [optional]
	- serialize(obj)
		* serializes the given object into a string
		* return values:
			- the serialized object (string)
		* parameters:
			- obj: the object to serialize (string, number, table, boolean, nil)
	- unserialize(str)
		* unserializes the give string into the corresponding object
		* return values:
			- the unserialized object (string, number, table, boolean, nil)
		* parameters:
			- str: the serialized string (string)