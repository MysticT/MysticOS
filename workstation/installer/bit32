-- Bit32 Lib for MysticOS
--[[
Copyright © 2012 Esteban Hermida a.k.a MysticT

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
copies of the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

-The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
-Visible credit is given to the original author.
-The software is distributed in a non-profit way.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--]]

local MOD = 0x100000000 -- 2 ^ 32
local MAX = 0xFFFFFFFF -- 2 ^ 32 - 1

local function int32(n)
	return math.floor(math.abs(n)) % MOD
end

local tAnd = {
{ 0, 0 },
{ 0, 1 }
}
local tOr = {
{ 0, 1 },
{ 1, 1 }
}
local tXor = {
{ 0, 1 },
{ 1, 0 }
}

local function bit_op(a, b, t)
	local p = 1
	local r = 0
	while a > 0 or b > 0 do
		r = r + (t[(a % 2) + 1][(b % 2) + 1] * p)
		a = math.floor(a / 2)
		b = math.floor(b / 2)
		p = p * 2
	end
	return r
end

local function bit_and(a, b)
	return bit_op(a, b, tAnd)
end

local function bit_or(a, b)
	return bit_op(a, b, tOr)
end

local function bit_xor(a, b)
	return bit_op(a, b, tXor)
end

-- Lib functions

function bnot(i)
	return MAX - int32(i)
end

function band(a, ...)
	a = int32(a)
	for _,i in ipairs({...}) do
		a = bit_and(a, int32(i))
	end
	return a
end

function bor(a, ...)
	a = int32(a)
	for _,i in ipairs({...}) do
		a = bit_or(a, int32(i))
	end
	return a
end

function bxor(a, ...)
	a = int32(a)
	for _,i in ipairs({...}) do
		a = bit_xor(a, int32(i))
	end
	return a
end

function lshift(i, n)
	if n < 0 then
		return rshift(i, n)
	end
	return (int32(i) * 2 ^ n) % MOD
end

function rshift(i, n)
	if n < 0 then
		return lshift(i, n)
	end
	return math.floor(int32(i) / 2 ^ n)
end

function lrotate(i, n)
	n = n % 32
	return bor(lshift(band(i, rshift(MAX, n)), n), rshift(i, 32 - n))
end

function rrotate(i, n)
	n = n % 32
	return bor(rshift(band(i, lshift(MAX, n)), n), lshift(i, 32 - n))
end

function btest(...)
	return band(...) ~= 0
end

function testbit(i, n)
	return int32(i) % (2 * n) >= n
end

function setbit(i, n)
	i = int32(i)
	if i % (2 * n) >= n then
		return i
	end
	return i + n
end

function clearbit(i, n)
	i = int32(i)
	if i % (2 * n) >= n then
		return i - n
	end
	return i
end