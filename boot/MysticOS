-- MysticCore

-- TODO: getfenv, setfenv

__VERSION = "MysticCore 0.2"

local sLibsPath = "MysticOS/corelibs"
local sStartupPath = "MysticOS/startup"

-- Load functions

function loadfile(sPath, tEnv)
	local file = fs.open(sPath, "rb")
	if file then
		local sCode = ""
		local b = file.read()
		while b do
			sCode = sCode..string.char(b)
			b = file.read()
		end
		file.close()
		local func, err = loadstring(sCode, fs.getName(sPath))
		if func and tEnv then
			setfenv(func, tEnv)
		end
		return func, err
	end
	return nil, "File "..sPath.." not found."
end

function dofile(sFileName, tEnv)
	local fnFile, err = loadfile(sPath, tEnv or getfenv(2)) -- TODO
	if fnFile then
		return fnFile()
	end
	error(err, 2)
end

-- Error functions

function assert(condition, msg, level)
	if not condition then
		error(msg, (tonumber(level) + 1) or 2)
	end
	return condition
end

function checkType(var, sType)
	if type(var) ~= sType then
		error(sType.." expected, got "..type(var), 3)
	end
end

-- table functions

function table.contains(t, val)
	for _,v in pairs(t) do
		if v == val then
			return true
		end
	end
	return false
end

function table.contains_key(t, key)
	return t[key] ~= nil
end

function table.clear(t)
	local k = next(t)
	while k do
		t[k] = nil
		k = next(t)
	end
end

function table.copy(src, dst)
	dst = dst or {}
	for k, v in pairs(src) do
		dst[k] = v
	end
	return dst
end

function table.deep_copy(t)
	local lookup = {}
	local function copy(obj)
		if type(obj) ~= "table" then
			return obj
		elseif lookup[obj] ~= nil then
			return lookup[obj]
		end
		local tbl = {}
		lookup[obj] = tbl
		for k, v in pairs(obj) do
			tbl[copy(k)] = copy(v)
		end
		return setmetatable(tbl, getmetatable(obj))
	end
	return copy(t)
end

function table.keys(t)
	local tKeys = {}
	for k in pairs(t) do
		tKeys[#tKeys + 1] = k
	end
	return tKeys
end

function table.values(t)
	local tValues = {}
	for _,v in pairs(t) do
		tValues[#tValues + 1] = v
	end
	return tValues
end

function table.size(t)
	local i = 0
	for _ in pairs(t) do
		i = i + 1
	end
	return i
end

function table.empty(t)
	return next(t) == nil
end

function table.append(dst, src)
	for i = 1, #src do
		dst[#dst + 1] = src[i]
	end
end

-- string functions

-- workaround for a bug in LuaJ
local s_sub = string.sub
function string.sub(s, i, j)
	return s_sub(s, i, j)..""
end

function string.replace(str, i, j, s)
	return string.sub(str, 1, i - 1)..s..string.sub(str, j + 1)
end

function string.insert(str, i, s)
	return string.sub(str, 1, i)..s..string.sub(str, i + 1)
end

function string.set(s, i, c)
	return string.sub(s, 1, i - 1)..string.sub(c, 1, 1)..string.sub(s, i + 1)
end

function string.at(s, i)
	return string.sub(s, i, i)
end

-- Math functions

function math.logN(n, base)
	return math.log(n) / math.log(base)
end

-- Error Handling

local function write(sText)
	sText = tostring(sText)
	local nLines = 0
	local w, h = term.getSize()
	if w < 1 and h < 1 then
		return 0
	end
	local x, y = term.getCursorPos()
	local function newline()
		if y + 1 <= h then
			term.setCursorPos(1, y + 1)
		else
			term.scroll(1)
			term.setCursorPos(1, h)
		end
		x, y = term.getCursorPos()
		nLines = nLines + 1
	end
	while #sText > 0 do
		local space = string.match(sText, "^([ \t]+)")
		if space then
			term.write(space)
			x, y = term.getCursorPos()
			sText = string.sub(sText, #space + 1)
		end
		while string.at(sText, 1) == "\n" do
			newline()
			sText = string.sub(sText, 2)
		end
		if #sText > 0 then
			local txt = string.match(sText, "^[^ \t\n]+")
			if txt then
				sText = string.sub(sText, #txt + 1)
				if #txt > w then
					while #txt > 0 do
						if x > w then
							newline()
						end
						term.write(txt)
						txt = string.sub(txt, (w - x) + 2)
						x, y = term.getCursorPos()
					end
				else
					if #txt > w - x then
						newline()
					end
					term.write(txt)
					x, y = term.getCursorPos()
				end
			end
		end
	end
	return nLines
end

local function print(...)
	local nLines = 0
	for i = 1, #arg do
		nLines = nLines + write(tostring(arg[i]))
	end
	nLines = nLines + write("\n", true)
	return nLines
end

local function showError(title, err)
	term.clear()
	local w, h = term.getSize()
	term.setCursorPos(math.floor((w / 2) - (#title / 2)), 1)
	write(title)
	term.setCursorPos(1, 2)
	print(err)
	print("\nPress any key to continue...")
	coroutine.yield("key")
end

-- Environment

local coreEnv = {}

for k, v in pairs(getfenv()) do
	coreEnv[k] = v
end

-- Load corelibs

local function loadLib(path)
	local tEnv = {}
	setmetatable(tEnv, { __index = coreEnv })
	local fnLib, err = loadfile(path, tEnv)
	if not fnLib then
		return false, err
	end
	local ok, lib = pcall(fnLib)
	if not ok then
		return false, lib
	end
	if not lib then
		lib = {}
		for k, v in pairs(tEnv) do
			lib[k] = v
		end
	end
	coreEnv[fs.getName(path)] = lib
	return true
end

local function loadCoreLibs(sPath)
	local libsList = fs.list(sPath)
	table.sort(libsList)
	for i = 1, #libsList do
		local path = fs.combine(sPath, libsList[i])
		if fs.isDir(path) then
			local ok, err = loadCoreLibs(path)
			if not ok then
				return false, err
			end
		else
			local ok, err = loadLib(path)
			if not ok then
				return false, err
			end
		end
	end
	return true
end

local ok, err = loadCoreLibs(sLibsPath)
if not ok then
	showError("Error loading libraries", err)
	return
end

-- Startup

local func, err = loadfile(sStartupPath, coreEnv)
if func then
	local ok, err = pcall(func)
	if not ok then
		showError("Error", err)
	end
else
	showError("Error loading startup file", err)
end